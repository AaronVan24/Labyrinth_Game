
Van_Aaron_RTOS_ProjectLabyrinth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001344  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ef4  08009ef4  000202b8  2**0
                  CONTENTS
  4 .ARM          00000000  08009ef4  08009ef4  000202b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ef4  08009ef4  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ef4  08009ef4  00019ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ef8  08009ef8  00019ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08009efc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202b8  2**0
                  CONTENTS
 10 .bss          0002ade4  200002b8  200002b8  000202b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2002b09c  2002b09c  000202b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018fdb  00000000  00000000  0002032b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f2e  00000000  00000000  00039306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d0  00000000  00000000  0003d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000107f  00000000  00000000  0003e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026db6  00000000  00000000  0003f887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017575  00000000  00000000  0006663d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e5940  00000000  00000000  0007dbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005de4  00000000  00000000  001634f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  001692d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b98 	.word	0x08008b98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002bc 	.word	0x200002bc
 80001ec:	08008b98 	.word	0x08008b98

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <ApplicationInit>:
//static osThreadId_t taskID_buttonDisrupt;
static osThreadId_t taskID_led;


void ApplicationInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	LTCD__Init();
 8000bbc:	f000 fe4a 	bl	8001854 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fea5 	bl	8001910 <LTCD_Layer_Init>
    Gyro_Init();
 8000bc6:	f000 fb1f 	bl	8001208 <Gyro_Init>

    event_flag_id1 = osEventFlagsNew(&event_attr1);
 8000bca:	482f      	ldr	r0, [pc, #188]	; (8000c88 <ApplicationInit+0xd0>)
 8000bcc:	f004 fbee 	bl	80053ac <osEventFlagsNew>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <ApplicationInit+0xd4>)
 8000bd4:	6013      	str	r3, [r2, #0]
    event_flag_id2 = osEventFlagsNew(&event_attr2);
 8000bd6:	482e      	ldr	r0, [pc, #184]	; (8000c90 <ApplicationInit+0xd8>)
 8000bd8:	f004 fbe8 	bl	80053ac <osEventFlagsNew>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a2d      	ldr	r2, [pc, #180]	; (8000c94 <ApplicationInit+0xdc>)
 8000be0:	6013      	str	r3, [r2, #0]
    sema_id = osSemaphoreNew(MAX_COUNT, INIT_COUNT, &(sema_atrr));
 8000be2:	4a2d      	ldr	r2, [pc, #180]	; (8000c98 <ApplicationInit+0xe0>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	2002      	movs	r0, #2
 8000be8:	f004 fd0b 	bl	8005602 <osSemaphoreNew>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <ApplicationInit+0xe4>)
 8000bf0:	6013      	str	r3, [r2, #0]
    mut_id1 = osMutexNew (&mutexx_atrr1);
 8000bf2:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <ApplicationInit+0xe8>)
 8000bf4:	f004 fc7f 	bl	80054f6 <osMutexNew>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <ApplicationInit+0xec>)
 8000bfc:	6013      	str	r3, [r2, #0]
    mut_id2 = osMutexNew (&mutexx_atrr2);
 8000bfe:	482a      	ldr	r0, [pc, #168]	; (8000ca8 <ApplicationInit+0xf0>)
 8000c00:	f004 fc79 	bl	80054f6 <osMutexNew>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4a29      	ldr	r2, [pc, #164]	; (8000cac <ApplicationInit+0xf4>)
 8000c08:	6013      	str	r3, [r2, #0]

	timeID = osTimerNew(timers_callback,osTimerPeriodic,NULL,&timers_attribute);
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <ApplicationInit+0xf8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <ApplicationInit+0xfc>)
 8000c12:	f004 fb21 	bl	8005258 <osTimerNew>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <ApplicationInit+0x100>)
 8000c1a:	6013      	str	r3, [r2, #0]
	if(timeID == NULL){
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <ApplicationInit+0x100>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d100      	bne.n	8000c26 <ApplicationInit+0x6e>
		for(;;);
 8000c24:	e7fe      	b.n	8000c24 <ApplicationInit+0x6c>
	}

	taskID_physics = osThreadNew(physicsTask, NULL, &task_Attr_physics);
 8000c26:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <ApplicationInit+0x104>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4825      	ldr	r0, [pc, #148]	; (8000cc0 <ApplicationInit+0x108>)
 8000c2c:	f004 fa52 	bl	80050d4 <osThreadNew>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <ApplicationInit+0x10c>)
 8000c34:	6013      	str	r3, [r2, #0]
	if(taskID_physics == NULL){
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <ApplicationInit+0x10c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <ApplicationInit+0x88>
		for(;;);
 8000c3e:	e7fe      	b.n	8000c3e <ApplicationInit+0x86>
	}

	taskID_lcd = osThreadNew(LCD_Display_Task, NULL, &task_Attr_LCDdisplay);
 8000c40:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <ApplicationInit+0x110>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4821      	ldr	r0, [pc, #132]	; (8000ccc <ApplicationInit+0x114>)
 8000c46:	f004 fa45 	bl	80050d4 <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <ApplicationInit+0x118>)
 8000c4e:	6013      	str	r3, [r2, #0]
	if(taskID_lcd == NULL){
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <ApplicationInit+0x118>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d100      	bne.n	8000c5a <ApplicationInit+0xa2>
		for(;;);
 8000c58:	e7fe      	b.n	8000c58 <ApplicationInit+0xa0>
	}

	taskID_led = osThreadNew(LED_output_task, NULL, &task_Attr_buttonDisrupt);
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <ApplicationInit+0x11c>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	481e      	ldr	r0, [pc, #120]	; (8000cd8 <ApplicationInit+0x120>)
 8000c60:	f004 fa38 	bl	80050d4 <osThreadNew>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <ApplicationInit+0x124>)
 8000c68:	6013      	str	r3, [r2, #0]
	if(taskID_led == NULL){
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <ApplicationInit+0x124>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d100      	bne.n	8000c74 <ApplicationInit+0xbc>
		for(;;);
 8000c72:	e7fe      	b.n	8000c72 <ApplicationInit+0xba>
//	taskID_buttonDisrupt = osThreadNew(buttonDisruptTask, NULL, &task_Attr_buttonDisrupt);
//	if(taskID_buttonDisrupt == NULL){
//		for(;;);
//	}
//
	osTimerStart(timeID,tick);
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <ApplicationInit+0x100>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <ApplicationInit+0x128>)
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fb66 	bl	8005350 <osTimerStart>

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	08008c44 	.word	0x08008c44
 8000c8c:	20000b1c 	.word	0x20000b1c
 8000c90:	08008c54 	.word	0x08008c54
 8000c94:	20000b20 	.word	0x20000b20
 8000c98:	08008c64 	.word	0x08008c64
 8000c9c:	20000b24 	.word	0x20000b24
 8000ca0:	08008c74 	.word	0x08008c74
 8000ca4:	20000b28 	.word	0x20000b28
 8000ca8:	08008c84 	.word	0x08008c84
 8000cac:	20000b2c 	.word	0x20000b2c
 8000cb0:	08008c34 	.word	0x08008c34
 8000cb4:	08000d41 	.word	0x08000d41
 8000cb8:	20000b30 	.word	0x20000b30
 8000cbc:	08008c94 	.word	0x08008c94
 8000cc0:	08000d55 	.word	0x08000d55
 8000cc4:	20000b34 	.word	0x20000b34
 8000cc8:	08008cb8 	.word	0x08008cb8
 8000ccc:	08000ed5 	.word	0x08000ed5
 8000cd0:	20000b38 	.word	0x20000b38
 8000cd4:	08008cdc 	.word	0x08008cdc
 8000cd8:	08000fc1 	.word	0x08000fc1
 8000cdc:	20000b3c 	.word	0x20000b3c
 8000ce0:	20000230 	.word	0x20000230

08000ce4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
	osEventFlagsSet(event_flag_id1, 1);
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x30>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 fb99 	bl	800542c <osEventFlagsSet>
	__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x34>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	615a      	str	r2, [r3, #20]

	osSemaphoreRelease(sema_id);
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x38>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fd05 	bl	8005714 <osSemaphoreRelease>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000b1c 	.word	0x20000b1c
 8000d18:	40013c00 	.word	0x40013c00
 8000d1c:	20000b24 	.word	0x20000b24

08000d20 <button_state>:
/**
  * @brief function to determine if the button is pressed
  * @param none
  * @retval if pressed the button this funciton will be used if called.
  */
GPIO_PinState button_state(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	GPIO_PinState pressed = HAL_GPIO_ReadPin(USER_PORT, USER_PIN);
 8000d26:	2101      	movs	r1, #1
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <button_state+0x1c>)
 8000d2a:	f002 fda3 	bl	8003874 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	return pressed;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40020000 	.word	0x40020000

08000d40 <timers_callback>:

void timers_callback(void *arg){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	(void)&arg;

	if(button_state()){
 8000d48:	f7ff ffea 	bl	8000d20 <button_state>
		if(buttonPressed == 10){
			buttonPressed = 0;
		}
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <physicsTask>:
/**
  * @brief task that pull gyro data and display the movement of the ball
  * @param argument- void pointer
  * @retval None
  */
void physicsTask(void *argument) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    (void)&argument;

    int16_t x_position = 294;
 8000d5c:	f44f 7393 	mov.w	r3, #294	; 0x126
 8000d60:	82fb      	strh	r3, [r7, #22]
    int16_t y_position = 143;
 8000d62:	238f      	movs	r3, #143	; 0x8f
 8000d64:	82bb      	strh	r3, [r7, #20]
    int16_t prev_x = x_position;
 8000d66:	8afb      	ldrh	r3, [r7, #22]
 8000d68:	827b      	strh	r3, [r7, #18]
    int16_t prev_y = y_position;
 8000d6a:	8abb      	ldrh	r3, [r7, #20]
 8000d6c:	823b      	strh	r3, [r7, #16]

    startScreen();
 8000d6e:	f000 f945 	bl	8000ffc <startScreen>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000d72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 ff2c 	bl	8001bd4 <LCD_Clear>

    for (;;) {
        osDelay(50);
 8000d7c:	2032      	movs	r0, #50	; 0x32
 8000d7e:	f004 fa3b 	bl	80051f8 <osDelay>
        osEventFlagsSet(event_flag_id1, physics_update_flag);
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <physicsTask+0x124>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 fb4f 	bl	800542c <osEventFlagsSet>

/* WITHOUT COLLISIONS CODE */

		int16_t gyro_x = Gyro_Get_x();
 8000d8e:	f000 fb2f 	bl	80013f0 <Gyro_Get_x>
 8000d92:	4603      	mov	r3, r0
 8000d94:	81fb      	strh	r3, [r7, #14]
		int16_t gyro_y = Gyro_Get_Velocity();
 8000d96:	f000 fb7f 	bl	8001498 <Gyro_Get_Velocity>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	81bb      	strh	r3, [r7, #12]
		x_position += gyro_x;
 8000d9e:	8afa      	ldrh	r2, [r7, #22]
 8000da0:	89fb      	ldrh	r3, [r7, #14]
 8000da2:	4413      	add	r3, r2
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	82fb      	strh	r3, [r7, #22]
		y_position += gyro_y;
 8000da8:	8aba      	ldrh	r2, [r7, #20]
 8000daa:	89bb      	ldrh	r3, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	82bb      	strh	r3, [r7, #20]

		// lcd screen boundries
		if (x_position < 5) x_position = 5;
 8000db2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	dc01      	bgt.n	8000dbe <physicsTask+0x6a>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	82fb      	strh	r3, [r7, #22]
		if (x_position > 314) x_position = 314;
 8000dbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dc2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8000dc6:	dd02      	ble.n	8000dce <physicsTask+0x7a>
 8000dc8:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8000dcc:	82fb      	strh	r3, [r7, #22]
		if (y_position < 5) y_position = 5;
 8000dce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	dc01      	bgt.n	8000dda <physicsTask+0x86>
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	82bb      	strh	r3, [r7, #20]
		if (y_position > 234) y_position = 234;
 8000dda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dde:	2bea      	cmp	r3, #234	; 0xea
 8000de0:	dd01      	ble.n	8000de6 <physicsTask+0x92>
 8000de2:	23ea      	movs	r3, #234	; 0xea
 8000de4:	82bb      	strh	r3, [r7, #20]

		LCD_Draw_Circle_Fill(prev_y, prev_x, 4, LCD_COLOR_WHITE);
 8000de6:	8a38      	ldrh	r0, [r7, #16]
 8000de8:	8a79      	ldrh	r1, [r7, #18]
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dee:	2204      	movs	r2, #4
 8000df0:	f000 fe9c 	bl	8001b2c <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(y_position, x_position, 4, LCD_COLOR_RED);
 8000df4:	8ab8      	ldrh	r0, [r7, #20]
 8000df6:	8af9      	ldrh	r1, [r7, #22]
 8000df8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	f000 fe95 	bl	8001b2c <LCD_Draw_Circle_Fill>

		prev_x = x_position;
 8000e02:	8afb      	ldrh	r3, [r7, #22]
 8000e04:	827b      	strh	r3, [r7, #18]
		prev_y = y_position;
 8000e06:	8abb      	ldrh	r3, [r7, #20]
 8000e08:	823b      	strh	r3, [r7, #16]
//	        }

/* END OF COLLISIONS CODE */


		LCD_Draw_Circle_Fill(33, 12, 8, LCD_COLOR_GREY);
 8000e0a:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8000e0e:	2208      	movs	r2, #8
 8000e10:	210c      	movs	r1, #12
 8000e12:	2021      	movs	r0, #33	; 0x21
 8000e14:	f000 fe8a 	bl	8001b2c <LCD_Draw_Circle_Fill>
		if (distance(x_position, y_position, 33, 15) <= 24){
 8000e18:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000e1c:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8000e20:	230f      	movs	r3, #15
 8000e22:	2221      	movs	r2, #33	; 0x21
 8000e24:	f000 f82a 	bl	8000e7c <distance>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b18      	cmp	r3, #24
 8000e2c:	dc07      	bgt.n	8000e3e <physicsTask+0xea>
			LCD_Clear(0,LCD_COLOR_WHITE);
 8000e2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 fece 	bl	8001bd4 <LCD_Clear>
			passGame();
 8000e38:	f000 f9b6 	bl	80011a8 <passGame>
			break;
 8000e3c:	e017      	b.n	8000e6e <physicsTask+0x11a>
		}

		LCD_Draw_Circle_Fill(195, 150, 8, LCD_COLOR_BLUE);
 8000e3e:	231f      	movs	r3, #31
 8000e40:	2208      	movs	r2, #8
 8000e42:	2196      	movs	r1, #150	; 0x96
 8000e44:	20c3      	movs	r0, #195	; 0xc3
 8000e46:	f000 fe71 	bl	8001b2c <LCD_Draw_Circle_Fill>
		if (distance(x_position, y_position, 150, 195) <= 7){
 8000e4a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000e4e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8000e52:	23c3      	movs	r3, #195	; 0xc3
 8000e54:	2296      	movs	r2, #150	; 0x96
 8000e56:	f000 f811 	bl	8000e7c <distance>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	dc8d      	bgt.n	8000d7c <physicsTask+0x28>
			LCD_Clear(0,LCD_COLOR_WHITE);
 8000e60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 feb5 	bl	8001bd4 <LCD_Clear>
			gameOver();
 8000e6a:	f000 f95f 	bl	800112c <gameOver>
			break;
		}
    }
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000b1c 	.word	0x20000b1c

08000e7c <distance>:
/**
  * @brief helper function used to detect collisions with points on the screen that would win you the game or lose you the game
  * @param x1- x-axis position of the gyro ball, y1- y-axis position of the gyro ball, x2- x-axis position of the stationary pin, y2- y-axis position of the stationary pin
  * @retval Using the built in sqrt function, I perform the Pythagorean theorem to find the distance between the gyro ball and the stationary pin.
  */
int distance(int x1, int y1, int x2, int y2){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
    return (int)sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	1a8a      	subs	r2, r1, r2
 8000e96:	fb03 f202 	mul.w	r2, r3, r2
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1acb      	subs	r3, r1, r3
 8000ea0:	6838      	ldr	r0, [r7, #0]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	1a41      	subs	r1, r0, r1
 8000ea6:	fb01 f303 	mul.w	r3, r1, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff faf1 	bl	8000494 <__aeabi_i2d>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	ec43 2b10 	vmov	d0, r2, r3
 8000eba:	f007 fd67 	bl	800898c <sqrt>
 8000ebe:	ec53 2b10 	vmov	r2, r3, d0
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fdff 	bl	8000ac8 <__aeabi_d2iz>
 8000eca:	4603      	mov	r3, r0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <LCD_Display_Task>:
/**
  * @brief task to display the maze and the ball moving at the same time
  * @param none
  * @retval None
  */
void LCD_Display_Task(void *argument) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    (void)&argument;

    uint32_t flags;
    for (;;) {
        flags = osEventFlagsGet(event_flag_id1);
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <LCD_Display_Task+0x24>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fae7 	bl	80054b4 <osEventFlagsGet>
 8000ee6:	60f8      	str	r0, [r7, #12]
        if(flags & physics_update_flag){
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f4      	beq.n	8000edc <LCD_Display_Task+0x8>
        	draw_maze();
 8000ef2:	f000 f803 	bl	8000efc <draw_maze>
        flags = osEventFlagsGet(event_flag_id1);
 8000ef6:	e7f1      	b.n	8000edc <LCD_Display_Task+0x8>
 8000ef8:	20000b1c 	.word	0x20000b1c

08000efc <draw_maze>:
/**
  * @brief function to draw maze given the 2D array and the cell height and width of each pixel of the walls.
  * @param none
  * @retval None
  */
void draw_maze() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
	uint16_t wall_color = LCD_COLOR_BLACK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	80fb      	strh	r3, [r7, #6]
	uint16_t path_color = LCD_COLOR_WHITE;
 8000f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0a:	80bb      	strh	r3, [r7, #4]
	for (int y = 0; y < MAZE_HEIGHT; y++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e04b      	b.n	8000faa <draw_maze+0xae>
		for (int x = 0; x < MAZE_WIDTH; x++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	e042      	b.n	8000f9e <draw_maze+0xa2>
			uint16_t color = static_maze[y][x] == 1 ? wall_color : path_color;
 8000f18:	4928      	ldr	r1, [pc, #160]	; (8000fbc <draw_maze+0xc0>)
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4413      	add	r3, r2
 8000f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <draw_maze+0x38>
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	e000      	b.n	8000f36 <draw_maze+0x3a>
 8000f34:	88bb      	ldrh	r3, [r7, #4]
 8000f36:	807b      	strh	r3, [r7, #2]
			for (int py = 0; py < CELL_HEIGHT; py++) {  // Draw cell as 22x22
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e029      	b.n	8000f92 <draw_maze+0x96>
				for (int px = 0; px < CELL_WIDTH; px++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	e020      	b.n	8000f86 <draw_maze+0x8a>
					LCD_Draw_Pixel(x * CELL_WIDTH + px, y * CELL_HEIGHT + py, color);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	441a      	add	r2, r3
 8000f4e:	0052      	lsls	r2, r2, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b298      	uxth	r0, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	441a      	add	r2, r3
 8000f68:	0052      	lsls	r2, r2, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f000 fd08 	bl	8001990 <LCD_Draw_Pixel>
				for (int px = 0; px < CELL_WIDTH; px++) {
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b15      	cmp	r3, #21
 8000f8a:	dddb      	ble.n	8000f44 <draw_maze+0x48>
			for (int py = 0; py < CELL_HEIGHT; py++) {  // Draw cell as 22x22
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b15      	cmp	r3, #21
 8000f96:	ddd2      	ble.n	8000f3e <draw_maze+0x42>
		for (int x = 0; x < MAZE_WIDTH; x++) {
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	ddb9      	ble.n	8000f18 <draw_maze+0x1c>
	for (int y = 0; y < MAZE_HEIGHT; y++) {
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	ddb0      	ble.n	8000f12 <draw_maze+0x16>
				}
			}
		}
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <LED_output_task>:
/**
  * @brief task to handle and run the led for both green and red and also implement when the button is pressed.
  * @param argument - void pointer
  * @retval None
  */
void LED_output_task(void *argument){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	(void)&argument;
	for(;;){
		HAL_GPIO_WritePin(BOTH_LED_PORT, GREEN_PIN, LED_ON);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fce:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <LED_output_task+0x38>)
 8000fd0:	f002 fc68 	bl	80038a4 <HAL_GPIO_WritePin>
		if(button_state()){
 8000fd4:	f7ff fea4 	bl	8000d20 <button_state>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f4      	beq.n	8000fc8 <LED_output_task+0x8>
			HAL_GPIO_WritePin(BOTH_LED_PORT, GREEN_PIN, LED_OFF);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <LED_output_task+0x38>)
 8000fe6:	f002 fc5d 	bl	80038a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BOTH_LED_PORT, RED_PIN, LED_ON);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff0:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <LED_output_task+0x38>)
 8000ff2:	f002 fc57 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BOTH_LED_PORT, GREEN_PIN, LED_ON);
 8000ff6:	e7e7      	b.n	8000fc8 <LED_output_task+0x8>
 8000ff8:	40021800 	.word	0x40021800

08000ffc <startScreen>:
/**
  * @brief clear and display 'On Your Mark, Get Set, Go' on three different screens
  * @param none
  * @retval None
  */
void startScreen(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_MAGENTA);
 8001000:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001004:	2000      	movs	r0, #0
 8001006:	f000 fde5 	bl	8001bd4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 fd6e 	bl	8001aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001010:	4845      	ldr	r0, [pc, #276]	; (8001128 <startScreen+0x12c>)
 8001012:	f000 fd7b 	bl	8001b0c <LCD_SetFont>

	LCD_DisplayChar(40,140,'O');
 8001016:	224f      	movs	r2, #79	; 0x4f
 8001018:	218c      	movs	r1, #140	; 0x8c
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f000 fd44 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(55,140,'N');
 8001020:	224e      	movs	r2, #78	; 0x4e
 8001022:	218c      	movs	r1, #140	; 0x8c
 8001024:	2037      	movs	r0, #55	; 0x37
 8001026:	f000 fd3f 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(65,140,' ');
 800102a:	2220      	movs	r2, #32
 800102c:	218c      	movs	r1, #140	; 0x8c
 800102e:	2041      	movs	r0, #65	; 0x41
 8001030:	f000 fd3a 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(80,140,'Y');
 8001034:	2259      	movs	r2, #89	; 0x59
 8001036:	218c      	movs	r1, #140	; 0x8c
 8001038:	2050      	movs	r0, #80	; 0x50
 800103a:	f000 fd35 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(95,140,'O');
 800103e:	224f      	movs	r2, #79	; 0x4f
 8001040:	218c      	movs	r1, #140	; 0x8c
 8001042:	205f      	movs	r0, #95	; 0x5f
 8001044:	f000 fd30 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(110,140,'U');
 8001048:	2255      	movs	r2, #85	; 0x55
 800104a:	218c      	movs	r1, #140	; 0x8c
 800104c:	206e      	movs	r0, #110	; 0x6e
 800104e:	f000 fd2b 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'R');
 8001052:	2252      	movs	r2, #82	; 0x52
 8001054:	218c      	movs	r1, #140	; 0x8c
 8001056:	207d      	movs	r0, #125	; 0x7d
 8001058:	f000 fd26 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,' ');
 800105c:	2220      	movs	r2, #32
 800105e:	218c      	movs	r1, #140	; 0x8c
 8001060:	2087      	movs	r0, #135	; 0x87
 8001062:	f000 fd21 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(150,140,'M');
 8001066:	224d      	movs	r2, #77	; 0x4d
 8001068:	218c      	movs	r1, #140	; 0x8c
 800106a:	2096      	movs	r0, #150	; 0x96
 800106c:	f000 fd1c 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(165,140,'A');
 8001070:	2241      	movs	r2, #65	; 0x41
 8001072:	218c      	movs	r1, #140	; 0x8c
 8001074:	20a5      	movs	r0, #165	; 0xa5
 8001076:	f000 fd17 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'R');
 800107a:	2252      	movs	r2, #82	; 0x52
 800107c:	218c      	movs	r1, #140	; 0x8c
 800107e:	20b4      	movs	r0, #180	; 0xb4
 8001080:	f000 fd12 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(195,140,'K');
 8001084:	224b      	movs	r2, #75	; 0x4b
 8001086:	218c      	movs	r1, #140	; 0x8c
 8001088:	20c3      	movs	r0, #195	; 0xc3
 800108a:	f000 fd0d 	bl	8001aa8 <LCD_DisplayChar>


	HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001092:	f001 ff27 	bl	8002ee4 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE2);
 8001096:	f240 511f 	movw	r1, #1311	; 0x51f
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fd9a 	bl	8001bd4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fd23 	bl	8001aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80010a6:	4820      	ldr	r0, [pc, #128]	; (8001128 <startScreen+0x12c>)
 80010a8:	f000 fd30 	bl	8001b0c <LCD_SetFont>

	LCD_DisplayChar(60,140,'G');
 80010ac:	2247      	movs	r2, #71	; 0x47
 80010ae:	218c      	movs	r1, #140	; 0x8c
 80010b0:	203c      	movs	r0, #60	; 0x3c
 80010b2:	f000 fcf9 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'E');
 80010b6:	2245      	movs	r2, #69	; 0x45
 80010b8:	218c      	movs	r1, #140	; 0x8c
 80010ba:	204b      	movs	r0, #75	; 0x4b
 80010bc:	f000 fcf4 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'T');
 80010c0:	2254      	movs	r2, #84	; 0x54
 80010c2:	218c      	movs	r1, #140	; 0x8c
 80010c4:	205a      	movs	r0, #90	; 0x5a
 80010c6:	f000 fcef 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(110,140,'S');
 80010ca:	2253      	movs	r2, #83	; 0x53
 80010cc:	218c      	movs	r1, #140	; 0x8c
 80010ce:	206e      	movs	r0, #110	; 0x6e
 80010d0:	f000 fcea 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'E');
 80010d4:	2245      	movs	r2, #69	; 0x45
 80010d6:	218c      	movs	r1, #140	; 0x8c
 80010d8:	207d      	movs	r0, #125	; 0x7d
 80010da:	f000 fce5 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'T');
 80010de:	2254      	movs	r2, #84	; 0x54
 80010e0:	218c      	movs	r1, #140	; 0x8c
 80010e2:	208c      	movs	r0, #140	; 0x8c
 80010e4:	f000 fce0 	bl	8001aa8 <LCD_DisplayChar>

	HAL_Delay(1000);
 80010e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ec:	f001 fefa 	bl	8002ee4 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_GREEN);
 80010f0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 fd6d 	bl	8001bd4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 fcf6 	bl	8001aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <startScreen+0x12c>)
 8001102:	f000 fd03 	bl	8001b0c <LCD_SetFont>

	LCD_DisplayChar(75,140,'G');
 8001106:	2247      	movs	r2, #71	; 0x47
 8001108:	218c      	movs	r1, #140	; 0x8c
 800110a:	204b      	movs	r0, #75	; 0x4b
 800110c:	f000 fccc 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(95,140,'O');
 8001110:	224f      	movs	r2, #79	; 0x4f
 8001112:	218c      	movs	r1, #140	; 0x8c
 8001114:	205f      	movs	r0, #95	; 0x5f
 8001116:	f000 fcc7 	bl	8001aa8 <LCD_DisplayChar>

	HAL_Delay(1000);
 800111a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111e:	f001 fee1 	bl	8002ee4 <HAL_Delay>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000023c 	.word	0x2000023c

0800112c <gameOver>:
/**
  * @brief clear and display 'Game Over' screen
  * @param none
  * @retval None
  */
void gameOver(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_RED);
 8001130:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fd4d 	bl	8001bd4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800113a:	2000      	movs	r0, #0
 800113c:	f000 fcd6 	bl	8001aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <gameOver+0x78>)
 8001142:	f000 fce3 	bl	8001b0c <LCD_SetFont>

	LCD_DisplayChar(60,140,'G');
 8001146:	2247      	movs	r2, #71	; 0x47
 8001148:	218c      	movs	r1, #140	; 0x8c
 800114a:	203c      	movs	r0, #60	; 0x3c
 800114c:	f000 fcac 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(75,140,'A');
 8001150:	2241      	movs	r2, #65	; 0x41
 8001152:	218c      	movs	r1, #140	; 0x8c
 8001154:	204b      	movs	r0, #75	; 0x4b
 8001156:	f000 fca7 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(90,140,'M');
 800115a:	224d      	movs	r2, #77	; 0x4d
 800115c:	218c      	movs	r1, #140	; 0x8c
 800115e:	205a      	movs	r0, #90	; 0x5a
 8001160:	f000 fca2 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(105,140,'E');
 8001164:	2245      	movs	r2, #69	; 0x45
 8001166:	218c      	movs	r1, #140	; 0x8c
 8001168:	2069      	movs	r0, #105	; 0x69
 800116a:	f000 fc9d 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,' ');
 800116e:	2220      	movs	r2, #32
 8001170:	218c      	movs	r1, #140	; 0x8c
 8001172:	2073      	movs	r0, #115	; 0x73
 8001174:	f000 fc98 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'O');
 8001178:	224f      	movs	r2, #79	; 0x4f
 800117a:	218c      	movs	r1, #140	; 0x8c
 800117c:	207d      	movs	r0, #125	; 0x7d
 800117e:	f000 fc93 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'V');
 8001182:	2256      	movs	r2, #86	; 0x56
 8001184:	218c      	movs	r1, #140	; 0x8c
 8001186:	208c      	movs	r0, #140	; 0x8c
 8001188:	f000 fc8e 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'E');
 800118c:	2245      	movs	r2, #69	; 0x45
 800118e:	218c      	movs	r1, #140	; 0x8c
 8001190:	209b      	movs	r0, #155	; 0x9b
 8001192:	f000 fc89 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(170,140,'R');
 8001196:	2252      	movs	r2, #82	; 0x52
 8001198:	218c      	movs	r1, #140	; 0x8c
 800119a:	20aa      	movs	r0, #170	; 0xaa
 800119c:	f000 fc84 	bl	8001aa8 <LCD_DisplayChar>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000023c 	.word	0x2000023c

080011a8 <passGame>:
/**
  * @brief clear and display 'You Win' screen
  * @param none
  * @retval None
  */
void passGame(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_GREEN);
 80011ac:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80011b0:	f000 fc9c 	bl	8001aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80011b4:	4813      	ldr	r0, [pc, #76]	; (8001204 <passGame+0x5c>)
 80011b6:	f000 fca9 	bl	8001b0c <LCD_SetFont>

	LCD_DisplayChar(40,80,'Y');
 80011ba:	2259      	movs	r2, #89	; 0x59
 80011bc:	2150      	movs	r1, #80	; 0x50
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f000 fc72 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(55,80,'O');
 80011c4:	224f      	movs	r2, #79	; 0x4f
 80011c6:	2150      	movs	r1, #80	; 0x50
 80011c8:	2037      	movs	r0, #55	; 0x37
 80011ca:	f000 fc6d 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'U');
 80011ce:	2255      	movs	r2, #85	; 0x55
 80011d0:	2150      	movs	r1, #80	; 0x50
 80011d2:	2046      	movs	r0, #70	; 0x46
 80011d4:	f000 fc68 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(85,80,' ');
 80011d8:	2220      	movs	r2, #32
 80011da:	2150      	movs	r1, #80	; 0x50
 80011dc:	2055      	movs	r0, #85	; 0x55
 80011de:	f000 fc63 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(100,80,'W');
 80011e2:	2257      	movs	r2, #87	; 0x57
 80011e4:	2150      	movs	r1, #80	; 0x50
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f000 fc5e 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(110,80,'I');
 80011ec:	2249      	movs	r2, #73	; 0x49
 80011ee:	2150      	movs	r1, #80	; 0x50
 80011f0:	206e      	movs	r0, #110	; 0x6e
 80011f2:	f000 fc59 	bl	8001aa8 <LCD_DisplayChar>
	LCD_DisplayChar(120,80,'N');
 80011f6:	224e      	movs	r2, #78	; 0x4e
 80011f8:	2150      	movs	r1, #80	; 0x50
 80011fa:	2078      	movs	r0, #120	; 0x78
 80011fc:	f000 fc54 	bl	8001aa8 <LCD_DisplayChar>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2000023c 	.word	0x2000023c

08001208 <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 800120c:	f000 f80a 	bl	8001224 <Gyro_Power_On>
	osDelay(100);
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f003 fff1 	bl	80051f8 <osDelay>
	Gyro_Config_Regs();
 8001216:	f000 f991 	bl	800153c <Gyro_Config_Regs>
	Gyro_Reboot();
 800121a:	f000 f847 	bl	80012ac <Gyro_Reboot>


}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800122a:	23a0      	movs	r3, #160	; 0xa0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8001232:	f000 f9fb 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8001236:	bf00      	nop
 8001238:	2102      	movs	r1, #2
 800123a:	481a      	ldr	r0, [pc, #104]	; (80012a4 <Gyro_Power_On+0x80>)
 800123c:	f002 fb1a 	bl	8003874 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f8      	bne.n	8001238 <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fa21 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fa03 	bl	800165c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8001256:	f000 f9f5 	bl	8001644 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 800125a:	2320      	movs	r3, #32
 800125c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	b2db      	uxtb	r3, r3
 8001266:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8001268:	f000 f9e0 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800126c:	bf00      	nop
 800126e:	2102      	movs	r1, #2
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <Gyro_Power_On+0x80>)
 8001272:	f002 faff 	bl	8003874 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f8      	bne.n	800126e <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fa06 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8001284:	1d7b      	adds	r3, r7, #5
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fa02 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800128c:	f000 f9da 	bl	8001644 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <Gyro_Power_On+0x84>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d000      	beq.n	800129a <Gyro_Power_On+0x76>
	{
		while(1);
 8001298:	e7fe      	b.n	8001298 <Gyro_Power_On+0x74>
	}
	}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020800 	.word	0x40020800
 80012a8:	20000b40 	.word	0x20000b40

080012ac <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 80012b2:	23a4      	movs	r3, #164	; 0xa4
 80012b4:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80012ba:	f000 f9b7 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80012be:	bf00      	nop
 80012c0:	2102      	movs	r1, #2
 80012c2:	4817      	ldr	r0, [pc, #92]	; (8001320 <Gyro_Reboot+0x74>)
 80012c4:	f002 fad6 	bl	8003874 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f8      	bne.n	80012c0 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f9dd 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80012d6:	1dbb      	adds	r3, r7, #6
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f9bf 	bl	800165c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80012de:	f000 f9b1 	bl	8001644 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 80012e2:	2324      	movs	r3, #36	; 0x24
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 80012f0:	f000 f99c 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80012f4:	bf00      	nop
 80012f6:	2102      	movs	r1, #2
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <Gyro_Reboot+0x74>)
 80012fa:	f002 fabb 	bl	8003874 <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f8      	bne.n	80012f6 <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f9c2 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 800130c:	1d7b      	adds	r3, r7, #5
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f9be 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8001314:	f000 f996 	bl	8001644 <Gyro_Slave_Disable>

}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020800 	.word	0x40020800

08001324 <Gyro_Get_Velocity_raw>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity_raw(){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 800132e:	23ea      	movs	r3, #234	; 0xea
 8001330:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800133a:	f000 f977 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800133e:	bf00      	nop
 8001340:	2102      	movs	r1, #2
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <Gyro_Get_Velocity_raw+0x60>)
 8001344:	f002 fa96 	bl	8003874 <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f8      	bne.n	8001340 <Gyro_Get_Velocity_raw+0x1c>
	Gyro_Transmit_Data(&cmd);
 800134e:	1d7b      	adds	r3, r7, #5
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f99d 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f97f 	bl	800165c <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 800135e:	1cfb      	adds	r3, r7, #3
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f97b 	bl	800165c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8001366:	f000 f96d 	bl	8001644 <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	80fb      	strh	r3, [r7, #6]
	return yval;
 8001378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40020800 	.word	0x40020800

08001388 <Gyro_Get_x_raw>:

int16_t Gyro_Get_x_raw(){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	int16_t xval = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_X_L);
 8001392:	23e8      	movs	r3, #232	; 0xe8
 8001394:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_xl = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_xh = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800139e:	f000 f945 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80013a2:	bf00      	nop
 80013a4:	2102      	movs	r1, #2
 80013a6:	4810      	ldr	r0, [pc, #64]	; (80013e8 <Gyro_Get_x_raw+0x60>)
 80013a8:	f002 fa64 	bl	8003874 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f8      	bne.n	80013a4 <Gyro_Get_x_raw+0x1c>
	Gyro_Transmit_Data(&cmd);
 80013b2:	1d7b      	adds	r3, r7, #5
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f96b 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_xl);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f94d 	bl	800165c <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_xh);
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f949 	bl	800165c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80013ca:	f000 f93b 	bl	8001644 <Gyro_Slave_Disable>


	xval = (int16_t) ((rxbuff_xh << 8) | rxbuff_xl);
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	793b      	ldrb	r3, [r7, #4]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	80fb      	strh	r3, [r7, #6]
	return xval;
 80013dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020800 	.word	0x40020800
 80013ec:	00000000 	.word	0x00000000

080013f0 <Gyro_Get_x>:

int16_t Gyro_Get_x(){
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	float xval = Gyro_Get_x_raw();
 80013f6:	f7ff ffc7 	bl	8001388 <Gyro_Get_x_raw>
 80013fa:	4603      	mov	r3, r0
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	edc7 7a01 	vstr	s15, [r7, #4]
	float x_val = (float)xval * SENSITIVITY;
 8001408:	edd7 7a01 	vldr	s15, [r7, #4]
 800140c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001488 <Gyro_Get_x+0x98>
 8001410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001414:	edc7 7a00 	vstr	s15, [r7]
	x_data = x_data + (x_val * DT * 0.005);
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <Gyro_Get_x+0x9c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f84b 	bl	80004b8 <__aeabi_f2d>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	edd7 7a00 	vldr	s15, [r7]
 800142a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001490 <Gyro_Get_x+0xa0>
 800142e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001432:	ee17 0a90 	vmov	r0, s15
 8001436:	f7ff f83f 	bl	80004b8 <__aeabi_f2d>
 800143a:	a311      	add	r3, pc, #68	; (adr r3, 8001480 <Gyro_Get_x+0x90>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f892 	bl	8000568 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe fed6 	bl	80001fc <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb5e 	bl	8000b18 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <Gyro_Get_x+0x9c>)
 8001460:	6013      	str	r3, [r2, #0]
	return (int16_t)x_data;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <Gyro_Get_x+0x9c>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146c:	ee17 3a90 	vmov	r3, s15
 8001470:	b21b      	sxth	r3, r3
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bdb0      	pop	{r4, r5, r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	47ae147b 	.word	0x47ae147b
 8001484:	3f747ae1 	.word	0x3f747ae1
 8001488:	418c0000 	.word	0x418c0000
 800148c:	20000b44 	.word	0x20000b44
 8001490:	3c23d70a 	.word	0x3c23d70a
 8001494:	00000000 	.word	0x00000000

08001498 <Gyro_Get_Velocity>:

int16_t Gyro_Get_Velocity(){
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
    float yval = Gyro_Get_Velocity_raw();
 800149e:	f7ff ff41 	bl	8001324 <Gyro_Get_Velocity_raw>
 80014a2:	4603      	mov	r3, r0
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	edc7 7a01 	vstr	s15, [r7, #4]
    float y_val = (float)yval * SENSITIVITY;
 80014b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001530 <Gyro_Get_Velocity+0x98>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a00 	vstr	s15, [r7]
    y_data = y_data + (y_val * DT * 0.005);
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <Gyro_Get_Velocity+0x9c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fff7 	bl	80004b8 <__aeabi_f2d>
 80014ca:	4604      	mov	r4, r0
 80014cc:	460d      	mov	r5, r1
 80014ce:	edd7 7a00 	vldr	s15, [r7]
 80014d2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001538 <Gyro_Get_Velocity+0xa0>
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	ee17 0a90 	vmov	r0, s15
 80014de:	f7fe ffeb 	bl	80004b8 <__aeabi_f2d>
 80014e2:	a311      	add	r3, pc, #68	; (adr r3, 8001528 <Gyro_Get_Velocity+0x90>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f83e 	bl	8000568 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fe82 	bl	80001fc <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb0a 	bl	8000b18 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <Gyro_Get_Velocity+0x9c>)
 8001508:	6013      	str	r3, [r2, #0]
    return (int16_t)y_data;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <Gyro_Get_Velocity+0x9c>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001514:	ee17 3a90 	vmov	r3, s15
 8001518:	b21b      	sxth	r3, r3
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bdb0      	pop	{r4, r5, r7, pc}
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	47ae147b 	.word	0x47ae147b
 800152c:	3f747ae1 	.word	0x3f747ae1
 8001530:	418c0000 	.word	0x418c0000
 8001534:	20000b48 	.word	0x20000b48
 8001538:	3c23d70a 	.word	0x3c23d70a

0800153c <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 8001542:	2320      	movs	r3, #32
 8001544:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1B; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 8001546:	231b      	movs	r3, #27
 8001548:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800154a:	f000 f86f 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800154e:	bf00      	nop
 8001550:	2102      	movs	r1, #2
 8001552:	482e      	ldr	r0, [pc, #184]	; (800160c <Gyro_Config_Regs+0xd0>)
 8001554:	f002 f98e 	bl	8003874 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f8      	bne.n	8001550 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f895 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8001566:	1dbb      	adds	r3, r7, #6
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f891 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800156e:	f000 f869 	bl	8001644 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 8001572:	2323      	movs	r3, #35	; 0x23
 8001574:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 8001576:	2310      	movs	r3, #16
 8001578:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800157a:	f000 f857 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800157e:	bf00      	nop
 8001580:	2102      	movs	r1, #2
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <Gyro_Config_Regs+0xd0>)
 8001584:	f002 f976 	bl	8003874 <HAL_GPIO_ReadPin>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f8      	bne.n	8001580 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f87d 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8001596:	1dbb      	adds	r3, r7, #6
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f879 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800159e:	f000 f851 	bl	8001644 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 80015a2:	2324      	movs	r3, #36	; 0x24
 80015a4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 80015a6:	23c0      	movs	r3, #192	; 0xc0
 80015a8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80015aa:	f000 f83f 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80015ae:	bf00      	nop
 80015b0:	2102      	movs	r1, #2
 80015b2:	4816      	ldr	r0, [pc, #88]	; (800160c <Gyro_Config_Regs+0xd0>)
 80015b4:	f002 f95e 	bl	8003874 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f8      	bne.n	80015b0 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f865 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80015c6:	1dbb      	adds	r3, r7, #6
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f861 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80015ce:	f000 f839 	bl	8001644 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 80015d2:	232e      	movs	r3, #46	; 0x2e
 80015d4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 80015d6:	2300      	movs	r3, #0
 80015d8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80015da:	f000 f827 	bl	800162c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80015de:	bf00      	nop
 80015e0:	2102      	movs	r1, #2
 80015e2:	480a      	ldr	r0, [pc, #40]	; (800160c <Gyro_Config_Regs+0xd0>)
 80015e4:	f002 f946 	bl	8003874 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f8      	bne.n	80015e0 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f84d 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80015f6:	1dbb      	adds	r3, r7, #6
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f849 	bl	8001690 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80015fe:	f000 f821 	bl	8001644 <Gyro_Slave_Disable>




}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020800 	.word	0x40020800

08001610 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <Gyro_HAL_Check+0x18>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d000      	beq.n	800161e <Gyro_HAL_Check+0xe>
		while(1);
 800161c:	e7fe      	b.n	800161c <Gyro_HAL_Check+0xc>
	}
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	20000b40 	.word	0x20000b40

0800162c <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <Gyro_Slave_Enable+0x14>)
 8001636:	f002 f935 	bl	80038a4 <HAL_GPIO_WritePin>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40020800 	.word	0x40020800

08001644 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2102      	movs	r1, #2
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <Gyro_Slave_Disable+0x14>)
 800164e:	f002 f929 	bl	80038a4 <HAL_GPIO_WritePin>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40020800 	.word	0x40020800

0800165c <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8001664:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001668:	2201      	movs	r2, #1
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <Gyro_Receive_Data+0x2c>)
 800166e:	f002 fffc 	bl	800466a <HAL_SPI_Receive>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <Gyro_Receive_Data+0x30>)
 8001678:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 800167a:	f7ff ffc9 	bl	8001610 <Gyro_HAL_Check>

}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2002657c 	.word	0x2002657c
 800168c:	20000b40 	.word	0x20000b40

08001690 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8001698:	f644 6320 	movw	r3, #20000	; 0x4e20
 800169c:	2201      	movs	r2, #1
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <Gyro_Transmit_Data+0x2c>)
 80016a2:	f002 fea6 	bl	80043f2 <HAL_SPI_Transmit>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <Gyro_Transmit_Data+0x30>)
 80016ac:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 80016ae:	f7ff ffaf 	bl	8001610 <Gyro_HAL_Check>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2002657c 	.word	0x2002657c
 80016c0:	20000b40 	.word	0x20000b40

080016c4 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <LCD_GPIO_Init+0x174>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a59      	ldr	r2, [pc, #356]	; (8001838 <LCD_GPIO_Init+0x174>)
 80016d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <LCD_GPIO_Init+0x174>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <LCD_GPIO_Init+0x174>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <LCD_GPIO_Init+0x174>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <LCD_GPIO_Init+0x174>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a4b      	ldr	r2, [pc, #300]	; (8001838 <LCD_GPIO_Init+0x174>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b45      	ldr	r3, [pc, #276]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a44      	ldr	r2, [pc, #272]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a3d      	ldr	r2, [pc, #244]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <LCD_GPIO_Init+0x174>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <LCD_GPIO_Init+0x174>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a36      	ldr	r2, [pc, #216]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <LCD_GPIO_Init+0x174>)
 800177c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <LCD_GPIO_Init+0x174>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800178e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001792:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800179c:	2302      	movs	r3, #2
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80017a0:	230e      	movs	r3, #14
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4824      	ldr	r0, [pc, #144]	; (800183c <LCD_GPIO_Init+0x178>)
 80017ac:	f001 fdaa 	bl	8003304 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80017b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017b4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4820      	ldr	r0, [pc, #128]	; (8001840 <LCD_GPIO_Init+0x17c>)
 80017be:	f001 fda1 	bl	8003304 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80017c2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <LCD_GPIO_Init+0x180>)
 80017d0:	f001 fd98 	bl	8003304 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80017d4:	2348      	movs	r3, #72	; 0x48
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	481a      	ldr	r0, [pc, #104]	; (8001848 <LCD_GPIO_Init+0x184>)
 80017e0:	f001 fd90 	bl	8003304 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80017e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4816      	ldr	r0, [pc, #88]	; (800184c <LCD_GPIO_Init+0x188>)
 80017f2:	f001 fd87 	bl	8003304 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80017f6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017fa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	4813      	ldr	r0, [pc, #76]	; (8001850 <LCD_GPIO_Init+0x18c>)
 8001804:	f001 fd7e 	bl	8003304 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001808:	2303      	movs	r3, #3
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800180c:	2309      	movs	r3, #9
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <LCD_GPIO_Init+0x17c>)
 8001818:	f001 fd74 	bl	8003304 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800181c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <LCD_GPIO_Init+0x18c>)
 800182a:	f001 fd6b 	bl	8003304 <HAL_GPIO_Init>
}
 800182e:	bf00      	nop
 8001830:	3730      	adds	r7, #48	; 0x30
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800

08001854 <LTCD__Init>:


void LTCD__Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <LTCD__Init+0xb0>)
 800185a:	4a2b      	ldr	r2, [pc, #172]	; (8001908 <LTCD__Init+0xb4>)
 800185c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <LTCD__Init+0xb0>)
 8001860:	2209      	movs	r2, #9
 8001862:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <LTCD__Init+0xb0>)
 8001866:	2201      	movs	r2, #1
 8001868:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <LTCD__Init+0xb0>)
 800186c:	221d      	movs	r2, #29
 800186e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <LTCD__Init+0xb0>)
 8001872:	2203      	movs	r2, #3
 8001874:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001876:	4b23      	ldr	r3, [pc, #140]	; (8001904 <LTCD__Init+0xb0>)
 8001878:	f240 120d 	movw	r2, #269	; 0x10d
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <LTCD__Init+0xb0>)
 8001880:	f240 1243 	movw	r2, #323	; 0x143
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <LTCD__Init+0xb0>)
 8001888:	f240 1217 	movw	r2, #279	; 0x117
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <LTCD__Init+0xb0>)
 8001890:	f240 1247 	movw	r2, #327	; 0x147
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <LTCD__Init+0xb0>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <LTCD__Init+0xb0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <LTCD__Init+0xb0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <LTCD__Init+0xb8>)
 80018b0:	2208      	movs	r2, #8
 80018b2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <LTCD__Init+0xb8>)
 80018b6:	22c0      	movs	r2, #192	; 0xc0
 80018b8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <LTCD__Init+0xb8>)
 80018bc:	2204      	movs	r2, #4
 80018be:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <LTCD__Init+0xb8>)
 80018c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80018c8:	4810      	ldr	r0, [pc, #64]	; (800190c <LTCD__Init+0xb8>)
 80018ca:	f002 fac3 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <LTCD__Init+0xb0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <LTCD__Init+0xb0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <LTCD__Init+0xb0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <LTCD__Init+0xb0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80018e6:	f7ff feed 	bl	80016c4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <LTCD__Init+0xb0>)
 80018ec:	f002 f80c 	bl	8003908 <HAL_LTDC_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80018f6:	f000 f98f 	bl	8001c18 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80018fa:	f000 f990 	bl	8001c1e <ili9341_Init>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000b4c 	.word	0x20000b4c
 8001908:	40016800 	.word	0x40016800
 800190c:	20000bf4 	.word	0x20000bf4

08001910 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b090      	sub	sp, #64	; 0x40
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800191e:	23f0      	movs	r3, #240	; 0xf0
 8001920:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001926:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800192a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800192c:	2302      	movs	r3, #2
 800192e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001930:	23ff      	movs	r3, #255	; 0xff
 8001932:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800193e:	2305      	movs	r3, #5
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <LTCD_Layer_Init+0x78>)
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800194c:	23f0      	movs	r3, #240	; 0xf0
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001950:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	4619      	mov	r1, r3
 8001970:	4806      	ldr	r0, [pc, #24]	; (800198c <LTCD_Layer_Init+0x7c>)
 8001972:	f002 f899 	bl	8003aa8 <HAL_LTDC_ConfigLayer>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800197c:	f000 f94c 	bl	8001c18 <LCD_Error_Handler>
	}

}
 8001980:	bf00      	nop
 8001982:	3740      	adds	r7, #64	; 0x40
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000c80 	.word	0x20000c80
 800198c:	20000b4c 	.word	0x20000b4c

08001990 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
 800199a:	460b      	mov	r3, r1
 800199c:	80bb      	strh	r3, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80019a2:	88ba      	ldrh	r2, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	461a      	mov	r2, r3
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	4413      	add	r3, r2
 80019b2:	4905      	ldr	r1, [pc, #20]	; (80019c8 <LCD_Draw_Pixel+0x38>)
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000c80 	.word	0x20000c80

080019cc <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	603a      	str	r2, [r7, #0]
 80019d6:	80fb      	strh	r3, [r7, #6]
 80019d8:	460b      	mov	r3, r1
 80019da:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e04c      	b.n	8001a84 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	e03f      	b.n	8001a70 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <LCD_DrawChar+0xd0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <LCD_DrawChar+0xd4>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	08db      	lsrs	r3, r3, #3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	fa42 f303 	asr.w	r3, r2, r3
 8001a18:	400b      	ands	r3, r1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <LCD_DrawChar+0x5c>
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <LCD_DrawChar+0xd0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	889b      	ldrh	r3, [r3, #4]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d920      	bls.n	8001a6a <LCD_DrawChar+0x9e>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	fa42 f303 	asr.w	r3, r2, r3
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d104      	bne.n	8001a4c <LCD_DrawChar+0x80>
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <LCD_DrawChar+0xd0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	889b      	ldrh	r3, [r3, #4]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d80e      	bhi.n	8001a6a <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4413      	add	r3, r2
 8001a54:	b298      	uxth	r0, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <LCD_DrawChar+0xd8>)
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff ff93 	bl	8001990 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <LCD_DrawChar+0xd0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	889b      	ldrh	r3, [r3, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d3b8      	bcc.n	80019f0 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <LCD_DrawChar+0xd0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	88db      	ldrh	r3, [r3, #6]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d3ab      	bcc.n	80019ea <LCD_DrawChar+0x1e>
      }
    }
  }
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000c24 	.word	0x20000c24
 8001aa0:	aaaaaaab 	.word	0xaaaaaaab
 8001aa4:	20000234 	.word	0x20000234

08001aa8 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	80bb      	strh	r3, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	3b20      	subs	r3, #32
 8001abe:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <LCD_DisplayChar+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <LCD_DisplayChar+0x40>)
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	88c9      	ldrh	r1, [r1, #6]
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	441a      	add	r2, r3
 8001ad6:	88b9      	ldrh	r1, [r7, #4]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff76 	bl	80019cc <LCD_DrawChar>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000c24 	.word	0x20000c24

08001aec <LCD_SetTextColor>:
	}

}

void LCD_SetTextColor(uint16_t Color)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <LCD_SetTextColor+0x1c>)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	8013      	strh	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000234 	.word	0x20000234

08001b0c <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <LCD_SetFont+0x1c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000c24 	.word	0x20000c24

08001b2c <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	81fb      	strh	r3, [r7, #14]
 8001b52:	e034      	b.n	8001bbe <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	425b      	negs	r3, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	81bb      	strh	r3, [r7, #12]
 8001b5c:	e024      	b.n	8001ba8 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001b5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b66:	fb03 f202 	mul.w	r2, r3, r2
 8001b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	441a      	add	r2, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	8879      	ldrh	r1, [r7, #2]
 8001b7c:	fb01 f303 	mul.w	r3, r1, r3
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dc0b      	bgt.n	8001b9c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001b84:	89ba      	ldrh	r2, [r7, #12]
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b298      	uxth	r0, r3
 8001b8c:	89fa      	ldrh	r2, [r7, #14]
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	883a      	ldrh	r2, [r7, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff fefa 	bl	8001990 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001b9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	81bb      	strh	r3, [r7, #12]
 8001ba8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	ddd5      	ble.n	8001b5e <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 8001bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	81fb      	strh	r3, [r7, #14]
 8001bbe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	ddc5      	ble.n	8001b54 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
	...

08001bd4 <LCD_Clear>:
        LCD_Draw_Pixel(x + i, y, color);
    }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460a      	mov	r2, r1
 8001bde:	71fb      	strb	r3, [r7, #7]
 8001be0:	4613      	mov	r3, r2
 8001be2:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e007      	b.n	8001c00 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001bf0:	4908      	ldr	r1, [pc, #32]	; (8001c14 <LCD_Clear+0x40>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	88ba      	ldrh	r2, [r7, #4]
 8001bf6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001c06:	d3f3      	bcc.n	8001bf0 <LCD_Clear+0x1c>
		}
	}
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000c80 	.word	0x20000c80

08001c18 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8001c1c:	e7fe      	b.n	8001c1c <LCD_Error_Handler+0x4>

08001c1e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001c22:	f000 f9ff 	bl	8002024 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001c26:	20ca      	movs	r0, #202	; 0xca
 8001c28:	f000 f943 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001c2c:	20c3      	movs	r0, #195	; 0xc3
 8001c2e:	f000 f94d 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001c32:	2008      	movs	r0, #8
 8001c34:	f000 f94a 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001c38:	2050      	movs	r0, #80	; 0x50
 8001c3a:	f000 f947 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001c3e:	20cf      	movs	r0, #207	; 0xcf
 8001c40:	f000 f937 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 f941 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001c4a:	20c1      	movs	r0, #193	; 0xc1
 8001c4c:	f000 f93e 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001c50:	2030      	movs	r0, #48	; 0x30
 8001c52:	f000 f93b 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001c56:	20ed      	movs	r0, #237	; 0xed
 8001c58:	f000 f92b 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001c5c:	2064      	movs	r0, #100	; 0x64
 8001c5e:	f000 f935 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 f932 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001c68:	2012      	movs	r0, #18
 8001c6a:	f000 f92f 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001c6e:	2081      	movs	r0, #129	; 0x81
 8001c70:	f000 f92c 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001c74:	20e8      	movs	r0, #232	; 0xe8
 8001c76:	f000 f91c 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001c7a:	2085      	movs	r0, #133	; 0x85
 8001c7c:	f000 f926 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 f923 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001c86:	2078      	movs	r0, #120	; 0x78
 8001c88:	f000 f920 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001c8c:	20cb      	movs	r0, #203	; 0xcb
 8001c8e:	f000 f910 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001c92:	2039      	movs	r0, #57	; 0x39
 8001c94:	f000 f91a 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001c98:	202c      	movs	r0, #44	; 0x2c
 8001c9a:	f000 f917 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f914 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001ca4:	2034      	movs	r0, #52	; 0x34
 8001ca6:	f000 f911 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001caa:	2002      	movs	r0, #2
 8001cac:	f000 f90e 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001cb0:	20f7      	movs	r0, #247	; 0xf7
 8001cb2:	f000 f8fe 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001cb6:	2020      	movs	r0, #32
 8001cb8:	f000 f908 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001cbc:	20ea      	movs	r0, #234	; 0xea
 8001cbe:	f000 f8f8 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f902 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 f8ff 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001cce:	20b1      	movs	r0, #177	; 0xb1
 8001cd0:	f000 f8ef 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 f8f9 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001cda:	201b      	movs	r0, #27
 8001cdc:	f000 f8f6 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001ce0:	20b6      	movs	r0, #182	; 0xb6
 8001ce2:	f000 f8e6 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f000 f8f0 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001cec:	20a2      	movs	r0, #162	; 0xa2
 8001cee:	f000 f8ed 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001cf2:	20c0      	movs	r0, #192	; 0xc0
 8001cf4:	f000 f8dd 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001cf8:	2010      	movs	r0, #16
 8001cfa:	f000 f8e7 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001cfe:	20c1      	movs	r0, #193	; 0xc1
 8001d00:	f000 f8d7 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001d04:	2010      	movs	r0, #16
 8001d06:	f000 f8e1 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001d0a:	20c5      	movs	r0, #197	; 0xc5
 8001d0c:	f000 f8d1 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001d10:	2045      	movs	r0, #69	; 0x45
 8001d12:	f000 f8db 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001d16:	2015      	movs	r0, #21
 8001d18:	f000 f8d8 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001d1c:	20c7      	movs	r0, #199	; 0xc7
 8001d1e:	f000 f8c8 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001d22:	2090      	movs	r0, #144	; 0x90
 8001d24:	f000 f8d2 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001d28:	2036      	movs	r0, #54	; 0x36
 8001d2a:	f000 f8c2 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001d2e:	20c8      	movs	r0, #200	; 0xc8
 8001d30:	f000 f8cc 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001d34:	20f2      	movs	r0, #242	; 0xf2
 8001d36:	f000 f8bc 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f8c6 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001d40:	20b0      	movs	r0, #176	; 0xb0
 8001d42:	f000 f8b6 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001d46:	20c2      	movs	r0, #194	; 0xc2
 8001d48:	f000 f8c0 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001d4c:	20b6      	movs	r0, #182	; 0xb6
 8001d4e:	f000 f8b0 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001d52:	200a      	movs	r0, #10
 8001d54:	f000 f8ba 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001d58:	20a7      	movs	r0, #167	; 0xa7
 8001d5a:	f000 f8b7 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001d5e:	2027      	movs	r0, #39	; 0x27
 8001d60:	f000 f8b4 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d64:	2004      	movs	r0, #4
 8001d66:	f000 f8b1 	bl	8001ecc <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001d6a:	202a      	movs	r0, #42	; 0x2a
 8001d6c:	f000 f8a1 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 f8ab 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f8a8 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f8a5 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001d82:	20ef      	movs	r0, #239	; 0xef
 8001d84:	f000 f8a2 	bl	8001ecc <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001d88:	202b      	movs	r0, #43	; 0x2b
 8001d8a:	f000 f892 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f89c 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f000 f899 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 f896 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001da0:	203f      	movs	r0, #63	; 0x3f
 8001da2:	f000 f893 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001da6:	20f6      	movs	r0, #246	; 0xf6
 8001da8:	f000 f883 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f000 f88d 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 f88a 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001db8:	2006      	movs	r0, #6
 8001dba:	f000 f887 	bl	8001ecc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001dbe:	202c      	movs	r0, #44	; 0x2c
 8001dc0:	f000 f877 	bl	8001eb2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001dc4:	20c8      	movs	r0, #200	; 0xc8
 8001dc6:	f000 f9e9 	bl	800219c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001dca:	2026      	movs	r0, #38	; 0x26
 8001dcc:	f000 f871 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f000 f87b 	bl	8001ecc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001dd6:	20e0      	movs	r0, #224	; 0xe0
 8001dd8:	f000 f86b 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001ddc:	200f      	movs	r0, #15
 8001dde:	f000 f875 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001de2:	2029      	movs	r0, #41	; 0x29
 8001de4:	f000 f872 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001de8:	2024      	movs	r0, #36	; 0x24
 8001dea:	f000 f86f 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001dee:	200c      	movs	r0, #12
 8001df0:	f000 f86c 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001df4:	200e      	movs	r0, #14
 8001df6:	f000 f869 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dfa:	2009      	movs	r0, #9
 8001dfc:	f000 f866 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001e00:	204e      	movs	r0, #78	; 0x4e
 8001e02:	f000 f863 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e06:	2078      	movs	r0, #120	; 0x78
 8001e08:	f000 f860 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001e0c:	203c      	movs	r0, #60	; 0x3c
 8001e0e:	f000 f85d 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001e12:	2009      	movs	r0, #9
 8001e14:	f000 f85a 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001e18:	2013      	movs	r0, #19
 8001e1a:	f000 f857 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001e1e:	2005      	movs	r0, #5
 8001e20:	f000 f854 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001e24:	2017      	movs	r0, #23
 8001e26:	f000 f851 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e2a:	2011      	movs	r0, #17
 8001e2c:	f000 f84e 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f000 f84b 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001e36:	20e1      	movs	r0, #225	; 0xe1
 8001e38:	f000 f83b 	bl	8001eb2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f845 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001e42:	2016      	movs	r0, #22
 8001e44:	f000 f842 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001e48:	201b      	movs	r0, #27
 8001e4a:	f000 f83f 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e4e:	2004      	movs	r0, #4
 8001e50:	f000 f83c 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e54:	2011      	movs	r0, #17
 8001e56:	f000 f839 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001e5a:	2007      	movs	r0, #7
 8001e5c:	f000 f836 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001e60:	2031      	movs	r0, #49	; 0x31
 8001e62:	f000 f833 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001e66:	2033      	movs	r0, #51	; 0x33
 8001e68:	f000 f830 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001e6c:	2042      	movs	r0, #66	; 0x42
 8001e6e:	f000 f82d 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001e72:	2005      	movs	r0, #5
 8001e74:	f000 f82a 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001e78:	200c      	movs	r0, #12
 8001e7a:	f000 f827 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f000 f824 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001e84:	2028      	movs	r0, #40	; 0x28
 8001e86:	f000 f821 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001e8a:	202f      	movs	r0, #47	; 0x2f
 8001e8c:	f000 f81e 	bl	8001ecc <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001e90:	200f      	movs	r0, #15
 8001e92:	f000 f81b 	bl	8001ecc <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001e96:	2011      	movs	r0, #17
 8001e98:	f000 f80b 	bl	8001eb2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e9c:	20c8      	movs	r0, #200	; 0xc8
 8001e9e:	f000 f97d 	bl	800219c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001ea2:	2029      	movs	r0, #41	; 0x29
 8001ea4:	f000 f805 	bl	8001eb2 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001ea8:	202c      	movs	r0, #44	; 0x2c
 8001eaa:	f000 f802 	bl	8001eb2 <ili9341_Write_Reg>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f94a 	bl	8002158 <LCD_IO_WriteReg>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f91b 	bl	8002114 <LCD_IO_WriteData>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001eec:	4819      	ldr	r0, [pc, #100]	; (8001f54 <SPI_Init+0x6c>)
 8001eee:	f002 fe6f 	bl	8004bd0 <HAL_SPI_GetState>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d12b      	bne.n	8001f50 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <SPI_Init+0x6c>)
 8001efa:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <SPI_Init+0x70>)
 8001efc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <SPI_Init+0x6c>)
 8001f00:	2218      	movs	r2, #24
 8001f02:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <SPI_Init+0x6c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <SPI_Init+0x6c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <SPI_Init+0x6c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <SPI_Init+0x6c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <SPI_Init+0x6c>)
 8001f1e:	2207      	movs	r2, #7
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <SPI_Init+0x6c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <SPI_Init+0x6c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <SPI_Init+0x6c>)
 8001f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f34:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <SPI_Init+0x6c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SPI_Init+0x6c>)
 8001f3e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f42:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <SPI_Init+0x6c>)
 8001f46:	f000 f833 	bl	8001fb0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f4a:	4802      	ldr	r0, [pc, #8]	; (8001f54 <SPI_Init+0x6c>)
 8001f4c:	f002 f9a0 	bl	8004290 <HAL_SPI_Init>
  }
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000c28 	.word	0x20000c28
 8001f58:	40015000 	.word	0x40015000

08001f5c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <SPI_Write+0x34>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	1db9      	adds	r1, r7, #6
 8001f70:	2201      	movs	r2, #1
 8001f72:	4808      	ldr	r0, [pc, #32]	; (8001f94 <SPI_Write+0x38>)
 8001f74:	f002 fa3d 	bl	80043f2 <HAL_SPI_Transmit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001f82:	f000 f809 	bl	8001f98 <SPI_Error>
  }
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000238 	.word	0x20000238
 8001f94:	20000c28 	.word	0x20000c28

08001f98 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <SPI_Error+0x14>)
 8001f9e:	f002 fa00 	bl	80043a2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001fa2:	f7ff ffa1 	bl	8001ee8 <SPI_Init>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000c28 	.word	0x20000c28

08001fb0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <SPI_MspInit+0x6c>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	4a16      	ldr	r2, [pc, #88]	; (800201c <SPI_MspInit+0x6c>)
 8001fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <SPI_MspInit+0x6c>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <SPI_MspInit+0x6c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <SPI_MspInit+0x6c>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <SPI_MspInit+0x6c>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001ff0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ffe:	2301      	movs	r3, #1
 8002000:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002002:	2305      	movs	r3, #5
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <SPI_MspInit+0x70>)
 800200e:	f001 f979 	bl	8003304 <HAL_GPIO_Init>
}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40021400 	.word	0x40021400

08002024 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800202a:	4b36      	ldr	r3, [pc, #216]	; (8002104 <LCD_IO_Init+0xe0>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d164      	bne.n	80020fc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002032:	4b34      	ldr	r3, [pc, #208]	; (8002104 <LCD_IO_Init+0xe0>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <LCD_IO_Init+0xe4>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <LCD_IO_Init+0xe4>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6313      	str	r3, [r2, #48]	; 0x30
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <LCD_IO_Init+0xe4>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002058:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4619      	mov	r1, r3
 800206c:	4827      	ldr	r0, [pc, #156]	; (800210c <LCD_IO_Init+0xe8>)
 800206e:	f001 f949 	bl	8003304 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <LCD_IO_Init+0xe4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a23      	ldr	r2, [pc, #140]	; (8002108 <LCD_IO_Init+0xe4>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <LCD_IO_Init+0xe4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800208e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4619      	mov	r1, r3
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <LCD_IO_Init+0xe8>)
 80020a8:	f001 f92c 	bl	8003304 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <LCD_IO_Init+0xe4>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <LCD_IO_Init+0xe4>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <LCD_IO_Init+0xe4>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80020c8:	2304      	movs	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <LCD_IO_Init+0xec>)
 80020e0:	f001 f910 	bl	8003304 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80020e4:	2200      	movs	r2, #0
 80020e6:	2104      	movs	r1, #4
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <LCD_IO_Init+0xec>)
 80020ea:	f001 fbdb 	bl	80038a4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80020ee:	2201      	movs	r2, #1
 80020f0:	2104      	movs	r1, #4
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <LCD_IO_Init+0xec>)
 80020f4:	f001 fbd6 	bl	80038a4 <HAL_GPIO_WritePin>

    SPI_Init();
 80020f8:	f7ff fef6 	bl	8001ee8 <SPI_Init>
  }
}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20026480 	.word	0x20026480
 8002108:	40023800 	.word	0x40023800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40020800 	.word	0x40020800

08002114 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002124:	480a      	ldr	r0, [pc, #40]	; (8002150 <LCD_IO_WriteData+0x3c>)
 8002126:	f001 fbbd 	bl	80038a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800212a:	2200      	movs	r2, #0
 800212c:	2104      	movs	r1, #4
 800212e:	4809      	ldr	r0, [pc, #36]	; (8002154 <LCD_IO_WriteData+0x40>)
 8002130:	f001 fbb8 	bl	80038a4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff10 	bl	8001f5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800213c:	2201      	movs	r2, #1
 800213e:	2104      	movs	r1, #4
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <LCD_IO_WriteData+0x40>)
 8002142:	f001 fbaf 	bl	80038a4 <HAL_GPIO_WritePin>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40020800 	.word	0x40020800

08002158 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002168:	480a      	ldr	r0, [pc, #40]	; (8002194 <LCD_IO_WriteReg+0x3c>)
 800216a:	f001 fb9b 	bl	80038a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800216e:	2200      	movs	r2, #0
 8002170:	2104      	movs	r1, #4
 8002172:	4809      	ldr	r0, [pc, #36]	; (8002198 <LCD_IO_WriteReg+0x40>)
 8002174:	f001 fb96 	bl	80038a4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff feed 	bl	8001f5c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002182:	2201      	movs	r2, #1
 8002184:	2104      	movs	r1, #4
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <LCD_IO_WriteReg+0x40>)
 8002188:	f001 fb8c 	bl	80038a4 <HAL_GPIO_WritePin>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40020800 	.word	0x40020800

0800219c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f003 f827 	bl	80051f8 <osDelay>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80021b8:	f000 fe22 	bl	8002e00 <HAL_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 80021bc:	f000 f99c 	bl	80024f8 <MX_GPIO_Init>
  MX_SPI5_Init();
 80021c0:	f000 f916 	bl	80023f0 <MX_SPI5_Init>
  MX_RNG_Init();
 80021c4:	f000 f900 	bl	80023c8 <MX_RNG_Init>
  MX_LTDC_Init();
 80021c8:	f000 f84c 	bl	8002264 <MX_LTDC_Init>
  MX_DMA2D_Init();
 80021cc:	f000 f818 	bl	8002200 <MX_DMA2D_Init>
  MX_FMC_Init();
 80021d0:	f000 f944 	bl	800245c <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  ApplicationInit();
 80021d4:	f7fe fcf0 	bl	8000bb8 <ApplicationInit>
  /* Init scheduler */
  osKernelInitialize();
 80021d8:	f002 ff32 	bl	8005040 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <main+0x40>)
 80021de:	2100      	movs	r1, #0
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <main+0x44>)
 80021e2:	f002 ff77 	bl	80050d4 <osThreadNew>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <main+0x48>)
 80021ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80021ec:	f002 ff4c 	bl	8005088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <main+0x3c>
 80021f2:	bf00      	nop
 80021f4:	08009ed0 	.word	0x08009ed0
 80021f8:	080027e5 	.word	0x080027e5
 80021fc:	20026608 	.word	0x20026608

08002200 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <MX_DMA2D_Init+0x5c>)
 8002206:	4a16      	ldr	r2, [pc, #88]	; (8002260 <MX_DMA2D_Init+0x60>)
 8002208:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_DMA2D_Init+0x5c>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <MX_DMA2D_Init+0x5c>)
 8002212:	2202      	movs	r2, #2
 8002214:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_DMA2D_Init+0x5c>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_DMA2D_Init+0x5c>)
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_DMA2D_Init+0x5c>)
 8002224:	2202      	movs	r2, #2
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_DMA2D_Init+0x5c>)
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_DMA2D_Init+0x5c>)
 8002230:	2200      	movs	r2, #0
 8002232:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002234:	4809      	ldr	r0, [pc, #36]	; (800225c <MX_DMA2D_Init+0x5c>)
 8002236:	f000 ff8a 	bl	800314e <HAL_DMA2D_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002240:	f000 fad8 	bl	80027f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002244:	2101      	movs	r1, #1
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_DMA2D_Init+0x5c>)
 8002248:	f000 ffca 	bl	80031e0 <HAL_DMA2D_ConfigLayer>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002252:	f000 facf 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20026484 	.word	0x20026484
 8002260:	4002b000 	.word	0x4002b000

08002264 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b09a      	sub	sp, #104	; 0x68
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800226a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226e:	2234      	movs	r2, #52	; 0x34
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f006 fb4a 	bl	800890c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002278:	463b      	mov	r3, r7
 800227a:	2234      	movs	r2, #52	; 0x34
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f006 fb44 	bl	800890c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002284:	4b4e      	ldr	r3, [pc, #312]	; (80023c0 <MX_LTDC_Init+0x15c>)
 8002286:	4a4f      	ldr	r2, [pc, #316]	; (80023c4 <MX_LTDC_Init+0x160>)
 8002288:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800228a:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <MX_LTDC_Init+0x15c>)
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002290:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <MX_LTDC_Init+0x15c>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002296:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <MX_LTDC_Init+0x15c>)
 8002298:	2200      	movs	r2, #0
 800229a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800229c:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <MX_LTDC_Init+0x15c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80022a8:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022aa:	2203      	movs	r2, #3
 80022ac:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80022ae:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022b0:	220e      	movs	r2, #14
 80022b2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80022b4:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022b6:	2205      	movs	r2, #5
 80022b8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022bc:	f240 228e 	movw	r2, #654	; 0x28e
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80022c2:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022c4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022cc:	f44f 7225 	mov.w	r2, #660	; 0x294
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022d4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80022ea:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80022f2:	4833      	ldr	r0, [pc, #204]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80022f4:	f001 fb08 	bl	8003908 <HAL_LTDC_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80022fe:	f000 fa79 	bl	80027f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002312:	2300      	movs	r3, #0
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800231e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002322:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002324:	2305      	movs	r3, #5
 8002326:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002346:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800234a:	2200      	movs	r2, #0
 800234c:	4619      	mov	r1, r3
 800234e:	481c      	ldr	r0, [pc, #112]	; (80023c0 <MX_LTDC_Init+0x15c>)
 8002350:	f001 fbaa 	bl	8003aa8 <HAL_LTDC_ConfigLayer>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800235a:	f000 fa4b 	bl	80027f4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002380:	2305      	movs	r3, #5
 8002382:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80023a2:	463b      	mov	r3, r7
 80023a4:	2201      	movs	r2, #1
 80023a6:	4619      	mov	r1, r3
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_LTDC_Init+0x15c>)
 80023aa:	f001 fb7d 	bl	8003aa8 <HAL_LTDC_ConfigLayer>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80023b4:	f000 fa1e 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	3768      	adds	r7, #104	; 0x68
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200264c4 	.word	0x200264c4
 80023c4:	40016800 	.word	0x40016800

080023c8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_RNG_Init+0x20>)
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <MX_RNG_Init+0x24>)
 80023d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_RNG_Init+0x20>)
 80023d4:	f001 fefe 	bl	80041d4 <HAL_RNG_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023de:	f000 fa09 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2002656c 	.word	0x2002656c
 80023ec:	50060800 	.word	0x50060800

080023f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_SPI5_Init+0x64>)
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <MX_SPI5_Init+0x68>)
 80023f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_SPI5_Init+0x64>)
 80023fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002400:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_SPI5_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_SPI5_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_SPI5_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_SPI5_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_SPI5_Init+0x64>)
 800241c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002420:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_SPI5_Init+0x64>)
 8002424:	2200      	movs	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <MX_SPI5_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_SPI5_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <MX_SPI5_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_SPI5_Init+0x64>)
 800243c:	220a      	movs	r2, #10
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_SPI5_Init+0x64>)
 8002442:	f001 ff25 	bl	8004290 <HAL_SPI_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800244c:	f000 f9d2 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2002657c 	.word	0x2002657c
 8002458:	40015000 	.word	0x40015000

0800245c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	615a      	str	r2, [r3, #20]
 8002472:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <MX_FMC_Init+0x94>)
 8002476:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <MX_FMC_Init+0x98>)
 8002478:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <MX_FMC_Init+0x94>)
 800247c:	2201      	movs	r2, #1
 800247e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <MX_FMC_Init+0x94>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002486:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <MX_FMC_Init+0x94>)
 8002488:	2204      	movs	r2, #4
 800248a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <MX_FMC_Init+0x94>)
 800248e:	2210      	movs	r2, #16
 8002490:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <MX_FMC_Init+0x94>)
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MX_FMC_Init+0x94>)
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_FMC_Init+0x94>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_FMC_Init+0x94>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_FMC_Init+0x94>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_FMC_Init+0x94>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80024b6:	2310      	movs	r3, #16
 80024b8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80024ba:	2310      	movs	r3, #16
 80024bc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80024be:	2310      	movs	r3, #16
 80024c0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80024c2:	2310      	movs	r3, #16
 80024c4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80024c6:	2310      	movs	r3, #16
 80024c8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80024ca:	2310      	movs	r3, #16
 80024cc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80024ce:	2310      	movs	r3, #16
 80024d0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <MX_FMC_Init+0x94>)
 80024d8:	f001 fea6 	bl	8004228 <HAL_SDRAM_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80024e2:	f000 f987 	bl	80027f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80024e6:	bf00      	nop
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200265d4 	.word	0x200265d4
 80024f4:	a0000140 	.word	0xa0000140

080024f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08e      	sub	sp, #56	; 0x38
 80024fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	4bae      	ldr	r3, [pc, #696]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4aad      	ldr	r2, [pc, #692]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4bab      	ldr	r3, [pc, #684]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	623b      	str	r3, [r7, #32]
 8002528:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	4ba7      	ldr	r3, [pc, #668]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4aa6      	ldr	r2, [pc, #664]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002534:	f043 0320 	orr.w	r3, r3, #32
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4ba4      	ldr	r3, [pc, #656]	; (80027cc <MX_GPIO_Init+0x2d4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	4ba0      	ldr	r3, [pc, #640]	; (80027cc <MX_GPIO_Init+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a9f      	ldr	r2, [pc, #636]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b9d      	ldr	r3, [pc, #628]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	4b99      	ldr	r3, [pc, #612]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a98      	ldr	r2, [pc, #608]	; (80027cc <MX_GPIO_Init+0x2d4>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b96      	ldr	r3, [pc, #600]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	4b92      	ldr	r3, [pc, #584]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a91      	ldr	r2, [pc, #580]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b8f      	ldr	r3, [pc, #572]	; (80027cc <MX_GPIO_Init+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a8a      	ldr	r2, [pc, #552]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b84      	ldr	r3, [pc, #528]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a83      	ldr	r2, [pc, #524]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b81      	ldr	r3, [pc, #516]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	4b7d      	ldr	r3, [pc, #500]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a7c      	ldr	r2, [pc, #496]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <MX_GPIO_Init+0x2d4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2116      	movs	r1, #22
 80025f2:	4877      	ldr	r0, [pc, #476]	; (80027d0 <MX_GPIO_Init+0x2d8>)
 80025f4:	f001 f956 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	4875      	ldr	r0, [pc, #468]	; (80027d4 <MX_GPIO_Init+0x2dc>)
 80025fe:	f001 f951 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002608:	4873      	ldr	r0, [pc, #460]	; (80027d8 <MX_GPIO_Init+0x2e0>)
 800260a:	f001 f94b 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002614:	4871      	ldr	r0, [pc, #452]	; (80027dc <MX_GPIO_Init+0x2e4>)
 8002616:	f001 f945 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800261a:	2316      	movs	r3, #22
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	4867      	ldr	r0, [pc, #412]	; (80027d0 <MX_GPIO_Init+0x2d8>)
 8002632:	f000 fe67 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002636:	2301      	movs	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800263a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	4862      	ldr	r0, [pc, #392]	; (80027d4 <MX_GPIO_Init+0x2dc>)
 800264c:	f000 fe5a 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002650:	f248 0306 	movw	r3, #32774	; 0x8006
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002656:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002664:	4619      	mov	r1, r3
 8002666:	485b      	ldr	r0, [pc, #364]	; (80027d4 <MX_GPIO_Init+0x2dc>)
 8002668:	f000 fe4c 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002670:	2301      	movs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800267c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002680:	4619      	mov	r1, r3
 8002682:	4854      	ldr	r0, [pc, #336]	; (80027d4 <MX_GPIO_Init+0x2dc>)
 8002684:	f000 fe3e 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002688:	2320      	movs	r3, #32
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800268c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269a:	4619      	mov	r1, r3
 800269c:	484c      	ldr	r0, [pc, #304]	; (80027d0 <MX_GPIO_Init+0x2d8>)
 800269e:	f000 fe31 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80026a2:	2304      	movs	r3, #4
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b2:	4619      	mov	r1, r3
 80026b4:	484a      	ldr	r0, [pc, #296]	; (80027e0 <MX_GPIO_Init+0x2e8>)
 80026b6:	f000 fe25 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80026ba:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80026cc:	230c      	movs	r3, #12
 80026ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d4:	4619      	mov	r1, r3
 80026d6:	4842      	ldr	r0, [pc, #264]	; (80027e0 <MX_GPIO_Init+0x2e8>)
 80026d8:	f000 fe14 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80026dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ee:	4619      	mov	r1, r3
 80026f0:	483b      	ldr	r0, [pc, #236]	; (80027e0 <MX_GPIO_Init+0x2e8>)
 80026f2:	f000 fe07 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80026f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002708:	4619      	mov	r1, r3
 800270a:	4833      	ldr	r0, [pc, #204]	; (80027d8 <MX_GPIO_Init+0x2e0>)
 800270c:	f000 fdfa 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002710:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	482b      	ldr	r0, [pc, #172]	; (80027d8 <MX_GPIO_Init+0x2e0>)
 800272a:	f000 fdeb 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800272e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002734:	2312      	movs	r3, #18
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002740:	2304      	movs	r3, #4
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	4619      	mov	r1, r3
 800274a:	4821      	ldr	r0, [pc, #132]	; (80027d0 <MX_GPIO_Init+0x2d8>)
 800274c:	f000 fdda 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002756:	2312      	movs	r3, #18
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002762:	2304      	movs	r3, #4
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	4819      	ldr	r0, [pc, #100]	; (80027d4 <MX_GPIO_Init+0x2dc>)
 800276e:	f000 fdc9 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002772:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002784:	2307      	movs	r3, #7
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4619      	mov	r1, r3
 800278e:	4811      	ldr	r0, [pc, #68]	; (80027d4 <MX_GPIO_Init+0x2dc>)
 8002790:	f000 fdb8 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002794:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279a:	2301      	movs	r3, #1
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027aa:	4619      	mov	r1, r3
 80027ac:	480b      	ldr	r0, [pc, #44]	; (80027dc <MX_GPIO_Init+0x2e4>)
 80027ae:	f000 fda9 	bl	8003304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2105      	movs	r1, #5
 80027b6:	2006      	movs	r0, #6
 80027b8:	f000 fc93 	bl	80030e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027bc:	2006      	movs	r0, #6
 80027be:	f000 fcac 	bl	800311a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027c2:	bf00      	nop
 80027c4:	3738      	adds	r7, #56	; 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021800 	.word	0x40021800
 80027e0:	40020400 	.word	0x40020400

080027e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027ec:	2001      	movs	r0, #1
 80027ee:	f002 fd03 	bl	80051f8 <osDelay>
 80027f2:	e7fb      	b.n	80027ec <StartDefaultTask+0x8>

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027fc:	e7fe      	b.n	80027fc <Error_Handler+0x8>
	...

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_MspInit+0x54>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_MspInit+0x54>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_MspInit+0x54>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_MspInit+0x54>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_MspInit+0x54>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_MspInit+0x54>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	210f      	movs	r1, #15
 8002842:	f06f 0001 	mvn.w	r0, #1
 8002846:	f000 fc4c 	bl	80030e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_DMA2D_MspInit+0x3c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10d      	bne.n	8002886 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_DMA2D_MspInit+0x40>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_DMA2D_MspInit+0x40>)
 8002874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_DMA2D_MspInit+0x40>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	4002b000 	.word	0x4002b000
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b09a      	sub	sp, #104	; 0x68
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	2230      	movs	r2, #48	; 0x30
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f006 f825 	bl	800890c <memset>
  if(hltdc->Instance==LTDC)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a81      	ldr	r2, [pc, #516]	; (8002acc <HAL_LTDC_MspInit+0x230>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	f040 80fa 	bne.w	8002ac2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80028ce:	2308      	movs	r3, #8
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80028d2:	2331      	movs	r3, #49	; 0x31
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80028d6:	2302      	movs	r3, #2
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80028da:	2300      	movs	r3, #0
 80028dc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fab6 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80028ee:	f7ff ff81 	bl	80027f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	4b76      	ldr	r3, [pc, #472]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a75      	ldr	r2, [pc, #468]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 80028fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	4b6f      	ldr	r3, [pc, #444]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a6e      	ldr	r2, [pc, #440]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b6c      	ldr	r3, [pc, #432]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a67      	ldr	r2, [pc, #412]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	4b61      	ldr	r3, [pc, #388]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a60      	ldr	r2, [pc, #384]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b5e      	ldr	r3, [pc, #376]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b5a      	ldr	r3, [pc, #360]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 800296c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b57      	ldr	r3, [pc, #348]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <HAL_LTDC_MspInit+0x234>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80029b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029c8:	230e      	movs	r3, #14
 80029ca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029d0:	4619      	mov	r1, r3
 80029d2:	4840      	ldr	r0, [pc, #256]	; (8002ad4 <HAL_LTDC_MspInit+0x238>)
 80029d4:	f000 fc96 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80029d8:	f641 0358 	movw	r3, #6232	; 0x1858
 80029dc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029ea:	230e      	movs	r3, #14
 80029ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029f2:	4619      	mov	r1, r3
 80029f4:	4838      	ldr	r0, [pc, #224]	; (8002ad8 <HAL_LTDC_MspInit+0x23c>)
 80029f6:	f000 fc85 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80029fa:	2303      	movs	r3, #3
 80029fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002a0a:	2309      	movs	r3, #9
 8002a0c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a12:	4619      	mov	r1, r3
 8002a14:	4831      	ldr	r0, [pc, #196]	; (8002adc <HAL_LTDC_MspInit+0x240>)
 8002a16:	f000 fc75 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002a1a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002a1e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a2c:	230e      	movs	r3, #14
 8002a2e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a34:	4619      	mov	r1, r3
 8002a36:	4829      	ldr	r0, [pc, #164]	; (8002adc <HAL_LTDC_MspInit+0x240>)
 8002a38:	f000 fc64 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002a3c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002a40:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a4e:	230e      	movs	r3, #14
 8002a50:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a56:	4619      	mov	r1, r3
 8002a58:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <HAL_LTDC_MspInit+0x244>)
 8002a5a:	f000 fc53 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002a5e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a70:	230e      	movs	r3, #14
 8002a72:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a78:	4619      	mov	r1, r3
 8002a7a:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <HAL_LTDC_MspInit+0x248>)
 8002a7c:	f000 fc42 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002a80:	2348      	movs	r3, #72	; 0x48
 8002a82:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a90:	230e      	movs	r3, #14
 8002a92:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <HAL_LTDC_MspInit+0x24c>)
 8002a9c:	f000 fc32 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002aa0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002aa4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ab2:	2309      	movs	r3, #9
 8002ab4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ab6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aba:	4619      	mov	r1, r3
 8002abc:	4808      	ldr	r0, [pc, #32]	; (8002ae0 <HAL_LTDC_MspInit+0x244>)
 8002abe:	f000 fc21 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3768      	adds	r7, #104	; 0x68
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40016800 	.word	0x40016800
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40021400 	.word	0x40021400
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	40021800 	.word	0x40021800
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00

08002aec <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_RNG_MspInit+0x3c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10d      	bne.n	8002b1a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RNG_MspInit+0x40>)
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <HAL_RNG_MspInit+0x40>)
 8002b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0c:	6353      	str	r3, [r2, #52]	; 0x34
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_RNG_MspInit+0x40>)
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	50060800 	.word	0x50060800
 8002b2c:	40023800 	.word	0x40023800

08002b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_SPI_MspInit+0x84>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12c      	bne.n	8002bac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_SPI_MspInit+0x88>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_SPI_MspInit+0x88>)
 8002b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_SPI_MspInit+0x88>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_SPI_MspInit+0x88>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_SPI_MspInit+0x88>)
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_SPI_MspInit+0x88>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002b8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b9c:	2305      	movs	r3, #5
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <HAL_SPI_MspInit+0x8c>)
 8002ba8:	f000 fbac 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	; 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40015000 	.word	0x40015000
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40021400 	.word	0x40021400

08002bc0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_SPI_MspDeInit+0x30>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10a      	bne.n	8002be8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_SPI_MspDeInit+0x34>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <HAL_SPI_MspDeInit+0x34>)
 8002bd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002bde:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_SPI_MspDeInit+0x38>)
 8002be4:	f000 fd3a 	bl	800365c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40015000 	.word	0x40015000
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40021400 	.word	0x40021400

08002bfc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_FMC_MspInit+0x104>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d16f      	bne.n	8002cf8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_FMC_MspInit+0x104>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_FMC_MspInit+0x108>)
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <HAL_FMC_MspInit+0x108>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6393      	str	r3, [r2, #56]	; 0x38
 8002c2e:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_FMC_MspInit+0x108>)
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002c3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c3e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c4c:	230c      	movs	r3, #12
 8002c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	482c      	ldr	r0, [pc, #176]	; (8002d08 <HAL_FMC_MspInit+0x10c>)
 8002c56:	f000 fb55 	bl	8003304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4826      	ldr	r0, [pc, #152]	; (8002d0c <HAL_FMC_MspInit+0x110>)
 8002c74:	f000 fb46 	bl	8003304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002c78:	f248 1333 	movw	r3, #33075	; 0x8133
 8002c7c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	481f      	ldr	r0, [pc, #124]	; (8002d10 <HAL_FMC_MspInit+0x114>)
 8002c94:	f000 fb36 	bl	8003304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002c98:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002c9c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002caa:	230c      	movs	r3, #12
 8002cac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4818      	ldr	r0, [pc, #96]	; (8002d14 <HAL_FMC_MspInit+0x118>)
 8002cb4:	f000 fb26 	bl	8003304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002cb8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002cbc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cca:	230c      	movs	r3, #12
 8002ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4811      	ldr	r0, [pc, #68]	; (8002d18 <HAL_FMC_MspInit+0x11c>)
 8002cd4:	f000 fb16 	bl	8003304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002cd8:	2360      	movs	r3, #96	; 0x60
 8002cda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ce8:	230c      	movs	r3, #12
 8002cea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480a      	ldr	r0, [pc, #40]	; (8002d1c <HAL_FMC_MspInit+0x120>)
 8002cf2:	f000 fb07 	bl	8003304 <HAL_GPIO_Init>
 8002cf6:	e000      	b.n	8002cfa <HAL_FMC_MspInit+0xfe>
    return;
 8002cf8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	2002660c 	.word	0x2002660c
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40021800 	.word	0x40021800
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40020400 	.word	0x40020400

08002d20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d28:	f7ff ff68 	bl	8002bfc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <NMI_Handler+0x4>

08002d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <HardFault_Handler+0x4>

08002d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <MemManage_Handler+0x4>

08002d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4a:	e7fe      	b.n	8002d4a <BusFault_Handler+0x4>

08002d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <UsageFault_Handler+0x4>

08002d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d64:	f000 f89e 	bl	8002ea4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d68:	f004 fc90 	bl	800768c <xTaskGetSchedulerState>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d72:	f005 fb51 	bl	8008418 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f000 fdaa 	bl	80038d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <SystemInit+0x20>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <SystemInit+0x20>)
 8002d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002db2:	490e      	ldr	r1, [pc, #56]	; (8002dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dc8:	4c0b      	ldr	r4, [pc, #44]	; (8002df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd6:	f7ff ffd7 	bl	8002d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dda:	f005 fda5 	bl	8008928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dde:	f7ff f9e9 	bl	80021b4 <main>
  bx  lr    
 8002de2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002de4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8002df0:	08009efc 	.word	0x08009efc
  ldr r2, =_sbss
 8002df4:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002df8:	2002b09c 	.word	0x2002b09c

08002dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_Init+0x40>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_Init+0x40>)
 8002e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_Init+0x40>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f000 f94f 	bl	80030cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2e:	200f      	movs	r0, #15
 8002e30:	f000 f808 	bl	8002e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e34:	f7ff fce4 	bl	8002800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x54>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_InitTick+0x58>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f967 	bl	8003136 <HAL_SYSTICK_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d80a      	bhi.n	8002e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e80:	f000 f92f 	bl	80030e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <HAL_InitTick+0x5c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000244 	.word	0x20000244
 8002e9c:	2000024c 	.word	0x2000024c
 8002ea0:	20000248 	.word	0x20000248

08002ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x20>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2000024c 	.word	0x2000024c
 8002ec8:	20026610 	.word	0x20026610

08002ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_GetTick+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20026610 	.word	0x20026610

08002ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff ffee 	bl	8002ecc <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002efc:	d005      	beq.n	8002f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_Delay+0x44>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f0a:	bf00      	nop
 8002f0c:	f7ff ffde 	bl	8002ecc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d8f7      	bhi.n	8002f0c <HAL_Delay+0x28>
  {
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000024c 	.word	0x2000024c

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <__NVIC_EnableIRQ+0x38>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db0a      	blt.n	8002ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	490c      	ldr	r1, [pc, #48]	; (8003018 <__NVIC_SetPriority+0x4c>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	0112      	lsls	r2, r2, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff4:	e00a      	b.n	800300c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4908      	ldr	r1, [pc, #32]	; (800301c <__NVIC_SetPriority+0x50>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	3b04      	subs	r3, #4
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	440b      	add	r3, r1
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf28      	it	cs
 800303e:	2304      	movcs	r3, #4
 8003040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3304      	adds	r3, #4
 8003046:	2b06      	cmp	r3, #6
 8003048:	d902      	bls.n	8003050 <NVIC_EncodePriority+0x30>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3b03      	subs	r3, #3
 800304e:	e000      	b.n	8003052 <NVIC_EncodePriority+0x32>
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43d9      	mvns	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	4313      	orrs	r3, r2
         );
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3b01      	subs	r3, #1
 8003094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003098:	d301      	bcc.n	800309e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309a:	2301      	movs	r3, #1
 800309c:	e00f      	b.n	80030be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <SysTick_Config+0x40>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a6:	210f      	movs	r1, #15
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ac:	f7ff ff8e 	bl	8002fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <SysTick_Config+0x40>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <SysTick_Config+0x40>)
 80030b8:	2207      	movs	r2, #7
 80030ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000e010 	.word	0xe000e010

080030cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ff29 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f4:	f7ff ff3e 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f7ff ff8e 	bl	8003020 <NVIC_EncodePriority>
 8003104:	4602      	mov	r2, r0
 8003106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff5d 	bl	8002fcc <__NVIC_SetPriority>
}
 8003112:	bf00      	nop
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff31 	bl	8002f90 <__NVIC_EnableIRQ>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ffa2 	bl	8003088 <SysTick_Config>
 8003144:	4603      	mov	r3, r0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e03b      	b.n	80031d8 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fb6f 	bl	8002858 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	f023 0107 	bic.w	r1, r3, #7
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68d1      	ldr	r1, [r2, #12]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_DMA2D_ConfigLayer+0x20>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e079      	b.n	80032f4 <HAL_DMA2D_ConfigLayer+0x114>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3318      	adds	r3, #24
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800322a:	4b35      	ldr	r3, [pc, #212]	; (8003300 <HAL_DMA2D_ConfigLayer+0x120>)
 800322c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b0a      	cmp	r3, #10
 8003234:	d003      	beq.n	800323e <HAL_DMA2D_ConfigLayer+0x5e>
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b09      	cmp	r3, #9
 800323c:	d107      	bne.n	800324e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e005      	b.n	800325a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d120      	bne.n	80032a2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	ea02 0103 	and.w	r1, r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	430a      	orrs	r2, r1
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b0a      	cmp	r3, #10
 8003288:	d003      	beq.n	8003292 <HAL_DMA2D_ConfigLayer+0xb2>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b09      	cmp	r3, #9
 8003290:	d127      	bne.n	80032e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
 80032a0:	e01f      	b.n	80032e2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	ea02 0103 	and.w	r1, r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b0a      	cmp	r3, #10
 80032ca:	d003      	beq.n	80032d4 <HAL_DMA2D_ConfigLayer+0xf4>
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d106      	bne.n	80032e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032e0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	ff03000f 	.word	0xff03000f

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e177      	b.n	8003610 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 8166 	bne.w	800360a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d005      	beq.n	8003356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003352:	2b02      	cmp	r3, #2
 8003354:	d130      	bne.n	80033b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800338c:	2201      	movs	r2, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 0201 	and.w	r2, r3, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d017      	beq.n	80033f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d123      	bne.n	8003448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80c0 	beq.w	800360a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_GPIO_Init+0x324>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_GPIO_Init+0x324>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_GPIO_Init+0x324>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a61      	ldr	r2, [pc, #388]	; (800362c <HAL_GPIO_Init+0x328>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_GPIO_Init+0x32c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d037      	beq.n	8003542 <HAL_GPIO_Init+0x23e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a57      	ldr	r2, [pc, #348]	; (8003634 <HAL_GPIO_Init+0x330>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_GPIO_Init+0x23a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_GPIO_Init+0x334>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <HAL_GPIO_Init+0x236>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a55      	ldr	r2, [pc, #340]	; (800363c <HAL_GPIO_Init+0x338>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d025      	beq.n	8003536 <HAL_GPIO_Init+0x232>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a54      	ldr	r2, [pc, #336]	; (8003640 <HAL_GPIO_Init+0x33c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <HAL_GPIO_Init+0x22e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a53      	ldr	r2, [pc, #332]	; (8003644 <HAL_GPIO_Init+0x340>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <HAL_GPIO_Init+0x22a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_GPIO_Init+0x344>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x226>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a51      	ldr	r2, [pc, #324]	; (800364c <HAL_GPIO_Init+0x348>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x222>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a50      	ldr	r2, [pc, #320]	; (8003650 <HAL_GPIO_Init+0x34c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x21e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <HAL_GPIO_Init+0x350>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x21a>
 800351a:	2309      	movs	r3, #9
 800351c:	e012      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800351e:	230a      	movs	r3, #10
 8003520:	e010      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003522:	2308      	movs	r3, #8
 8003524:	e00e      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003526:	2307      	movs	r3, #7
 8003528:	e00c      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800352a:	2306      	movs	r3, #6
 800352c:	e00a      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800352e:	2305      	movs	r3, #5
 8003530:	e008      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003532:	2304      	movs	r3, #4
 8003534:	e006      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003536:	2303      	movs	r3, #3
 8003538:	e004      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800353a:	2302      	movs	r3, #2
 800353c:	e002      	b.n	8003544 <HAL_GPIO_Init+0x240>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_GPIO_Init+0x240>
 8003542:	2300      	movs	r3, #0
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	f002 0203 	and.w	r2, r2, #3
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	4093      	lsls	r3, r2
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003554:	4935      	ldr	r1, [pc, #212]	; (800362c <HAL_GPIO_Init+0x328>)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003562:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <HAL_GPIO_Init+0x354>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003586:	4a34      	ldr	r2, [pc, #208]	; (8003658 <HAL_GPIO_Init+0x354>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800358c:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_GPIO_Init+0x354>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035da:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_GPIO_Init+0x354>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <HAL_GPIO_Init+0x354>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3301      	adds	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b0f      	cmp	r3, #15
 8003614:	f67f ae84 	bls.w	8003320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	3724      	adds	r7, #36	; 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	40013800 	.word	0x40013800
 8003630:	40020000 	.word	0x40020000
 8003634:	40020400 	.word	0x40020400
 8003638:	40020800 	.word	0x40020800
 800363c:	40020c00 	.word	0x40020c00
 8003640:	40021000 	.word	0x40021000
 8003644:	40021400 	.word	0x40021400
 8003648:	40021800 	.word	0x40021800
 800364c:	40021c00 	.word	0x40021c00
 8003650:	40022000 	.word	0x40022000
 8003654:	40022400 	.word	0x40022400
 8003658:	40013c00 	.word	0x40013c00

0800365c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e0d9      	b.n	800382c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003678:	2201      	movs	r2, #1
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	429a      	cmp	r2, r3
 8003690:	f040 80c9 	bne.w	8003826 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003694:	4a6b      	ldr	r2, [pc, #428]	; (8003844 <HAL_GPIO_DeInit+0x1e8>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	3302      	adds	r3, #2
 800369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4013      	ands	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_GPIO_DeInit+0x1ec>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d037      	beq.n	800372e <HAL_GPIO_DeInit+0xd2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a62      	ldr	r2, [pc, #392]	; (800384c <HAL_GPIO_DeInit+0x1f0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d031      	beq.n	800372a <HAL_GPIO_DeInit+0xce>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a61      	ldr	r2, [pc, #388]	; (8003850 <HAL_GPIO_DeInit+0x1f4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d02b      	beq.n	8003726 <HAL_GPIO_DeInit+0xca>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a60      	ldr	r2, [pc, #384]	; (8003854 <HAL_GPIO_DeInit+0x1f8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d025      	beq.n	8003722 <HAL_GPIO_DeInit+0xc6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a5f      	ldr	r2, [pc, #380]	; (8003858 <HAL_GPIO_DeInit+0x1fc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01f      	beq.n	800371e <HAL_GPIO_DeInit+0xc2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a5e      	ldr	r2, [pc, #376]	; (800385c <HAL_GPIO_DeInit+0x200>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d019      	beq.n	800371a <HAL_GPIO_DeInit+0xbe>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a5d      	ldr	r2, [pc, #372]	; (8003860 <HAL_GPIO_DeInit+0x204>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_GPIO_DeInit+0xba>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a5c      	ldr	r2, [pc, #368]	; (8003864 <HAL_GPIO_DeInit+0x208>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00d      	beq.n	8003712 <HAL_GPIO_DeInit+0xb6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a5b      	ldr	r2, [pc, #364]	; (8003868 <HAL_GPIO_DeInit+0x20c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <HAL_GPIO_DeInit+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a5a      	ldr	r2, [pc, #360]	; (800386c <HAL_GPIO_DeInit+0x210>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_GPIO_DeInit+0xae>
 8003706:	2309      	movs	r3, #9
 8003708:	e012      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 800370a:	230a      	movs	r3, #10
 800370c:	e010      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 800370e:	2308      	movs	r3, #8
 8003710:	e00e      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 8003712:	2307      	movs	r3, #7
 8003714:	e00c      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 8003716:	2306      	movs	r3, #6
 8003718:	e00a      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 800371a:	2305      	movs	r3, #5
 800371c:	e008      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 800371e:	2304      	movs	r3, #4
 8003720:	e006      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 8003722:	2303      	movs	r3, #3
 8003724:	e004      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_GPIO_DeInit+0xd4>
 800372e:	2300      	movs	r3, #0
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	f002 0203 	and.w	r2, r2, #3
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	4093      	lsls	r3, r2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d132      	bne.n	80037a6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003740:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43db      	mvns	r3, r3
 8003748:	4949      	ldr	r1, [pc, #292]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 800374a:	4013      	ands	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800374e:	4b48      	ldr	r3, [pc, #288]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	4946      	ldr	r1, [pc, #280]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 8003758:	4013      	ands	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800375c:	4b44      	ldr	r3, [pc, #272]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43db      	mvns	r3, r3
 8003764:	4942      	ldr	r1, [pc, #264]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 8003766:	4013      	ands	r3, r2
 8003768:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	43db      	mvns	r3, r3
 8003772:	493f      	ldr	r1, [pc, #252]	; (8003870 <HAL_GPIO_DeInit+0x214>)
 8003774:	4013      	ands	r3, r2
 8003776:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003788:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <HAL_GPIO_DeInit+0x1e8>)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	3302      	adds	r3, #2
 8003790:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	43da      	mvns	r2, r3
 8003798:	482a      	ldr	r0, [pc, #168]	; (8003844 <HAL_GPIO_DeInit+0x1e8>)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	400a      	ands	r2, r1
 80037a0:	3302      	adds	r3, #2
 80037a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2103      	movs	r1, #3
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	401a      	ands	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	08da      	lsrs	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3208      	adds	r2, #8
 80037c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	08d2      	lsrs	r2, r2, #3
 80037dc:	4019      	ands	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3208      	adds	r2, #8
 80037e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2103      	movs	r1, #3
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	2101      	movs	r1, #1
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2103      	movs	r1, #3
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	401a      	ands	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	f67f af22 	bls.w	8003678 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40013800 	.word	0x40013800
 8003848:	40020000 	.word	0x40020000
 800384c:	40020400 	.word	0x40020400
 8003850:	40020800 	.word	0x40020800
 8003854:	40020c00 	.word	0x40020c00
 8003858:	40021000 	.word	0x40021000
 800385c:	40021400 	.word	0x40021400
 8003860:	40021800 	.word	0x40021800
 8003864:	40021c00 	.word	0x40021c00
 8003868:	40022000 	.word	0x40022000
 800386c:	40022400 	.word	0x40022400
 8003870:	40013c00 	.word	0x40013c00

08003874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	887b      	ldrh	r3, [r7, #2]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e001      	b.n	8003896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
 80038b0:	4613      	mov	r3, r2
 80038b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b4:	787b      	ldrb	r3, [r7, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c0:	e003      	b.n	80038ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038c2:	887b      	ldrh	r3, [r7, #2]
 80038c4:	041a      	lsls	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	619a      	str	r2, [r3, #24]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ee:	4a05      	ldr	r2, [pc, #20]	; (8003904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd f9f4 	bl	8000ce4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40013c00 	.word	0x40013c00

08003908 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0bf      	b.n	8003a9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe ffb4 	bl	800289c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800394a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6999      	ldr	r1, [r3, #24]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003960:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <HAL_LTDC_Init+0x19c>)
 800397c:	400b      	ands	r3, r1
 800397e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	041b      	lsls	r3, r3, #16
 8003986:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68d9      	ldr	r1, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <HAL_LTDC_Init+0x19c>)
 80039aa:	400b      	ands	r3, r1
 80039ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68d9      	ldr	r1, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b33      	ldr	r3, [pc, #204]	; (8003aa4 <HAL_LTDC_Init+0x19c>)
 80039d8:	400b      	ands	r3, r1
 80039da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6919      	ldr	r1, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6959      	ldr	r1, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <HAL_LTDC_Init+0x19c>)
 8003a06:	400b      	ands	r3, r1
 8003a08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6959      	ldr	r1, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0206 	orr.w	r2, r2, #6
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	f000f800 	.word	0xf000f800

08003aa8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003aa8:	b5b0      	push	{r4, r5, r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_LTDC_ConfigLayer+0x1a>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e02c      	b.n	8003b1c <HAL_LTDC_ConfigLayer+0x74>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2134      	movs	r1, #52	; 0x34
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f811 	bl	8003b24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bdb0      	pop	{r4, r5, r7, pc}

08003b24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	4413      	add	r3, r2
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	01db      	lsls	r3, r3, #7
 8003b50:	4413      	add	r3, r2
 8003b52:	3384      	adds	r3, #132	; 0x84
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	01d2      	lsls	r2, r2, #7
 8003b60:	440a      	add	r2, r1
 8003b62:	3284      	adds	r2, #132	; 0x84
 8003b64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b7a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b7c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	01db      	lsls	r3, r3, #7
 8003b88:	440b      	add	r3, r1
 8003b8a:	3384      	adds	r3, #132	; 0x84
 8003b8c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba2:	4413      	add	r3, r2
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	01db      	lsls	r3, r3, #7
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3384      	adds	r3, #132	; 0x84
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	01d2      	lsls	r2, r2, #7
 8003bc2:	440a      	add	r2, r1
 8003bc4:	3284      	adds	r2, #132	; 0x84
 8003bc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003bca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bda:	4413      	add	r3, r2
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4619      	mov	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	440b      	add	r3, r1
 8003bea:	3384      	adds	r3, #132	; 0x84
 8003bec:	4619      	mov	r1, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	01db      	lsls	r3, r3, #7
 8003bfe:	4413      	add	r3, r2
 8003c00:	3384      	adds	r3, #132	; 0x84
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	01d2      	lsls	r2, r2, #7
 8003c0e:	440a      	add	r2, r1
 8003c10:	3284      	adds	r2, #132	; 0x84
 8003c12:	f023 0307 	bic.w	r3, r3, #7
 8003c16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	01db      	lsls	r3, r3, #7
 8003c22:	4413      	add	r3, r2
 8003c24:	3384      	adds	r3, #132	; 0x84
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	01db      	lsls	r3, r3, #7
 8003c54:	4413      	add	r3, r2
 8003c56:	3384      	adds	r3, #132	; 0x84
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	01db      	lsls	r3, r3, #7
 8003c64:	4413      	add	r3, r2
 8003c66:	3384      	adds	r3, #132	; 0x84
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c74:	461a      	mov	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	440b      	add	r3, r1
 8003c8a:	3384      	adds	r3, #132	; 0x84
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	01db      	lsls	r3, r3, #7
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3384      	adds	r3, #132	; 0x84
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	01d2      	lsls	r2, r2, #7
 8003cae:	440a      	add	r2, r1
 8003cb0:	3284      	adds	r2, #132	; 0x84
 8003cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	01db      	lsls	r3, r3, #7
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3384      	adds	r3, #132	; 0x84
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	01db      	lsls	r3, r3, #7
 8003cd8:	4413      	add	r3, r2
 8003cda:	3384      	adds	r3, #132	; 0x84
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	01d2      	lsls	r2, r2, #7
 8003ce8:	440a      	add	r2, r1
 8003cea:	3284      	adds	r2, #132	; 0x84
 8003cec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cf0:	f023 0307 	bic.w	r3, r3, #7
 8003cf4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	6809      	ldr	r1, [r1, #0]
 8003d02:	4608      	mov	r0, r1
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	01c9      	lsls	r1, r1, #7
 8003d08:	4401      	add	r1, r0
 8003d0a:	3184      	adds	r1, #132	; 0x84
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	01db      	lsls	r3, r3, #7
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3384      	adds	r3, #132	; 0x84
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	01db      	lsls	r3, r3, #7
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3384      	adds	r3, #132	; 0x84
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2300      	movs	r3, #0
 8003d32:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	01db      	lsls	r3, r3, #7
 8003d3e:	4413      	add	r3, r2
 8003d40:	3384      	adds	r3, #132	; 0x84
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003d52:	2304      	movs	r3, #4
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e01b      	b.n	8003d90 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003d60:	2303      	movs	r3, #3
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	e014      	b.n	8003d90 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00b      	beq.n	8003d86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d007      	beq.n	8003d86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d003      	beq.n	8003d86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d82:	2b07      	cmp	r3, #7
 8003d84:	d102      	bne.n	8003d8c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003d86:	2302      	movs	r3, #2
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	e001      	b.n	8003d90 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	01db      	lsls	r3, r3, #7
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3384      	adds	r3, #132	; 0x84
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4611      	mov	r1, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	01d2      	lsls	r2, r2, #7
 8003daa:	440a      	add	r2, r1
 8003dac:	3284      	adds	r2, #132	; 0x84
 8003dae:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1acb      	subs	r3, r1, r3
 8003dca:	69f9      	ldr	r1, [r7, #28]
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	6809      	ldr	r1, [r1, #0]
 8003dd6:	4608      	mov	r0, r1
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	01c9      	lsls	r1, r1, #7
 8003ddc:	4401      	add	r1, r0
 8003dde:	3184      	adds	r1, #132	; 0x84
 8003de0:	4313      	orrs	r3, r2
 8003de2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	01db      	lsls	r3, r3, #7
 8003dee:	4413      	add	r3, r2
 8003df0:	3384      	adds	r3, #132	; 0x84
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	01d2      	lsls	r2, r2, #7
 8003dfe:	440a      	add	r2, r1
 8003e00:	3284      	adds	r2, #132	; 0x84
 8003e02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	01db      	lsls	r3, r3, #7
 8003e16:	4413      	add	r3, r2
 8003e18:	3384      	adds	r3, #132	; 0x84
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	01db      	lsls	r3, r3, #7
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3384      	adds	r3, #132	; 0x84
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	4611      	mov	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	01d2      	lsls	r2, r2, #7
 8003e3c:	440a      	add	r2, r1
 8003e3e:	3284      	adds	r2, #132	; 0x84
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6013      	str	r3, [r2, #0]
}
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d075      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e88:	4b91      	ldr	r3, [pc, #580]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e8e:	f7ff f81d 	bl	8002ecc <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e96:	f7ff f819 	bl	8002ecc <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e189      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea8:	4b8a      	ldr	r3, [pc, #552]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	019a      	lsls	r2, r3, #6
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	071b      	lsls	r3, r3, #28
 8003ecc:	4981      	ldr	r1, [pc, #516]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ee0:	4b7c      	ldr	r3, [pc, #496]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee6:	0f1b      	lsrs	r3, r3, #28
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	019a      	lsls	r2, r3, #6
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	431a      	orrs	r2, r3
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	071b      	lsls	r3, r3, #28
 8003f00:	4974      	ldr	r1, [pc, #464]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f08:	4b72      	ldr	r3, [pc, #456]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0e:	f023 021f 	bic.w	r2, r3, #31
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	496e      	ldr	r1, [pc, #440]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	019a      	lsls	r2, r3, #6
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	071b      	lsls	r3, r3, #28
 8003f40:	4964      	ldr	r1, [pc, #400]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f48:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f4e:	f7fe ffbd 	bl	8002ecc <HAL_GetTick>
 8003f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f56:	f7fe ffb9 	bl	8002ecc <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e129      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f68:	4b5a      	ldr	r3, [pc, #360]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d079      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f8c:	4b52      	ldr	r3, [pc, #328]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f92:	f7fe ff9b 	bl	8002ecc <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f9a:	f7fe ff97 	bl	8002ecc <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e107      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fac:	4b49      	ldr	r3, [pc, #292]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb8:	d0ef      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d020      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fc6:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	0f1b      	lsrs	r3, r3, #28
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	019a      	lsls	r2, r3, #6
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	493b      	ldr	r1, [pc, #236]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	4934      	ldr	r1, [pc, #208]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01e      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004014:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	0e1b      	lsrs	r3, r3, #24
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	019a      	lsls	r2, r3, #6
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	071b      	lsls	r3, r3, #28
 8004034:	4927      	ldr	r1, [pc, #156]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800403e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004042:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	4922      	ldr	r1, [pc, #136]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004052:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004058:	f7fe ff38 	bl	8002ecc <HAL_GetTick>
 800405c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004060:	f7fe ff34 	bl	8002ecc <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0a4      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800407a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407e:	d1ef      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 808b 	beq.w	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	; 0x40
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a0b      	ldr	r2, [pc, #44]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040b6:	f7fe ff09 	bl	8002ecc <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040bc:	e010      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7fe ff05 	bl	8002ecc <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d909      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e075      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80040d0:	42470068 	.word	0x42470068
 80040d4:	40023800 	.word	0x40023800
 80040d8:	42470070 	.word	0x42470070
 80040dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040e0:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0e8      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ec:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02f      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d028      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800410a:	4b2f      	ldr	r3, [pc, #188]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004112:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004114:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800411a:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004120:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004126:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d114      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe fecb 	bl	8002ecc <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fe fec7 	bl	8002ecc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e035      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ee      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004168:	d10d      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800417a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417e:	4912      	ldr	r1, [pc, #72]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004180:	4313      	orrs	r3, r2
 8004182:	608b      	str	r3, [r1, #8]
 8004184:	e005      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800418c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004190:	6093      	str	r3, [r2, #8]
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419e:	490a      	ldr	r1, [pc, #40]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80041b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40007000 	.word	0x40007000
 80041c8:	40023800 	.word	0x40023800
 80041cc:	42470e40 	.word	0x42470e40
 80041d0:	424711e0 	.word	0x424711e0

080041d4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e01c      	b.n	8004220 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	795b      	ldrb	r3, [r3, #5]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe fc78 	bl	8002aec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0204 	orr.w	r2, r2, #4
 8004210:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e025      	b.n	8004288 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe fd65 	bl	8002d20 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f000 fdef 	bl	8004e4c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	f000 fe44 	bl	8004f06 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07b      	b.n	800439a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b2:	d009      	beq.n	80042c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
 80042ba:	e005      	b.n	80042c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fe fc24 	bl	8002b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	ea42 0103 	orr.w	r1, r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 0104 	and.w	r1, r3, #4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f003 0210 	and.w	r2, r3, #16
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e01a      	b.n	80043ea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fe fbf7 	bl	8002bc0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b088      	sub	sp, #32
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_SPI_Transmit+0x22>
 8004410:	2302      	movs	r3, #2
 8004412:	e126      	b.n	8004662 <HAL_SPI_Transmit+0x270>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800441c:	f7fe fd56 	bl	8002ecc <HAL_GetTick>
 8004420:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d002      	beq.n	8004438 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004432:	2302      	movs	r3, #2
 8004434:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004436:	e10b      	b.n	8004650 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_SPI_Transmit+0x52>
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004448:	e102      	b.n	8004650 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	d10f      	bne.n	80044b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d007      	beq.n	80044d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d8:	d14b      	bne.n	8004572 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_Transmit+0xf6>
 80044e2:	8afb      	ldrh	r3, [r7, #22]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d13e      	bne.n	8004566 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800450c:	e02b      	b.n	8004566 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d112      	bne.n	8004542 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	881a      	ldrh	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004540:	e011      	b.n	8004566 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004542:	f7fe fcc3 	bl	8002ecc <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d803      	bhi.n	800455a <HAL_SPI_Transmit+0x168>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004558:	d102      	bne.n	8004560 <HAL_SPI_Transmit+0x16e>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d102      	bne.n	8004566 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004564:	e074      	b.n	8004650 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ce      	bne.n	800450e <HAL_SPI_Transmit+0x11c>
 8004570:	e04c      	b.n	800460c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_SPI_Transmit+0x18e>
 800457a:	8afb      	ldrh	r3, [r7, #22]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d140      	bne.n	8004602 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045a6:	e02c      	b.n	8004602 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d113      	bne.n	80045de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	86da      	strh	r2, [r3, #54]	; 0x36
 80045dc:	e011      	b.n	8004602 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045de:	f7fe fc75 	bl	8002ecc <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d803      	bhi.n	80045f6 <HAL_SPI_Transmit+0x204>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f4:	d102      	bne.n	80045fc <HAL_SPI_Transmit+0x20a>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004600:	e026      	b.n	8004650 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1cd      	bne.n	80045a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	6839      	ldr	r1, [r7, #0]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fbd9 	bl	8004dc8 <SPI_EndRxTxTransaction>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e000      	b.n	8004650 <HAL_SPI_Transmit+0x25e>
  }

error:
 800464e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004660:	7ffb      	ldrb	r3, [r7, #31]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b088      	sub	sp, #32
 800466e:	af02      	add	r7, sp, #8
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004686:	d112      	bne.n	80046ae <HAL_SPI_Receive+0x44>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10e      	bne.n	80046ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2204      	movs	r2, #4
 8004694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	4613      	mov	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f8f1 	bl	800488c <HAL_SPI_TransmitReceive>
 80046aa:	4603      	mov	r3, r0
 80046ac:	e0ea      	b.n	8004884 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_SPI_Receive+0x52>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e0e3      	b.n	8004884 <HAL_SPI_Receive+0x21a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c4:	f7fe fc02 	bl	8002ecc <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046da:	e0ca      	b.n	8004872 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_SPI_Receive+0x7e>
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046ec:	e0c1      	b.n	8004872 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2204      	movs	r2, #4
 80046f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004734:	d10f      	bne.n	8004756 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004754:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d007      	beq.n	8004774 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004772:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d162      	bne.n	8004842 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800477c:	e02e      	b.n	80047dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d115      	bne.n	80047b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f103 020c 	add.w	r2, r3, #12
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	7812      	ldrb	r2, [r2, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047b6:	e011      	b.n	80047dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047b8:	f7fe fb88 	bl	8002ecc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d803      	bhi.n	80047d0 <HAL_SPI_Receive+0x166>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ce:	d102      	bne.n	80047d6 <HAL_SPI_Receive+0x16c>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047da:	e04a      	b.n	8004872 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1cb      	bne.n	800477e <HAL_SPI_Receive+0x114>
 80047e6:	e031      	b.n	800484c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d113      	bne.n	800481e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	b292      	uxth	r2, r2
 8004802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800481c:	e011      	b.n	8004842 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800481e:	f7fe fb55 	bl	8002ecc <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d803      	bhi.n	8004836 <HAL_SPI_Receive+0x1cc>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004834:	d102      	bne.n	800483c <HAL_SPI_Receive+0x1d2>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004840:	e017      	b.n	8004872 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1cd      	bne.n	80047e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fa53 	bl	8004cfc <SPI_EndRxTransaction>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
 800486e:	e000      	b.n	8004872 <HAL_SPI_Receive+0x208>
  }

error :
 8004870:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800489a:	2301      	movs	r3, #1
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x26>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e18a      	b.n	8004bc8 <HAL_SPI_TransmitReceive+0x33c>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ba:	f7fe fb07 	bl	8002ecc <HAL_GetTick>
 80048be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d00f      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x70>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e2:	d107      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d103      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x68>
 80048ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d003      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048fa:	e15b      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_SPI_TransmitReceive+0x82>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_SPI_TransmitReceive+0x82>
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004914:	e14e      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b04      	cmp	r3, #4
 8004920:	d003      	beq.n	800492a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2205      	movs	r2, #5
 8004926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	887a      	ldrh	r2, [r7, #2]
 800493a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	887a      	ldrh	r2, [r7, #2]
 8004952:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d007      	beq.n	800497e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800497c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004986:	d178      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x10a>
 8004990:	8b7b      	ldrh	r3, [r7, #26]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d166      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ba:	e053      	b.n	8004a64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d11b      	bne.n	8004a02 <HAL_SPI_TransmitReceive+0x176>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d016      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x176>
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d113      	bne.n	8004a02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	1c9a      	adds	r2, r3, #2
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d119      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x1b8>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d014      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	b292      	uxth	r2, r2
 8004a26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a40:	2301      	movs	r3, #1
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a44:	f7fe fa42 	bl	8002ecc <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d807      	bhi.n	8004a64 <HAL_SPI_TransmitReceive+0x1d8>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a5a:	d003      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a62:	e0a7      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1a6      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x130>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1a1      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x130>
 8004a78:	e07c      	b.n	8004b74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x1fc>
 8004a82:	8b7b      	ldrh	r3, [r7, #26]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d16b      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aae:	e057      	b.n	8004b60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d11c      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x26c>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d017      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x26c>
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d114      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	7812      	ldrb	r2, [r2, #0]
 8004ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d119      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x2ae>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d014      	beq.n	8004b3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b36:	2301      	movs	r3, #1
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b3a:	f7fe f9c7 	bl	8002ecc <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d803      	bhi.n	8004b52 <HAL_SPI_TransmitReceive+0x2c6>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x2cc>
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b5e:	e029      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1a2      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x224>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d19d      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f925 	bl	8004dc8 <SPI_EndRxTxTransaction>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d006      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b90:	e010      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	e000      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3730      	adds	r7, #48	; 0x30
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bde:	b2db      	uxtb	r3, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bfc:	f7fe f966 	bl	8002ecc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c0c:	f7fe f95e 	bl	8002ecc <HAL_GetTick>
 8004c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c12:	4b39      	ldr	r3, [pc, #228]	; (8004cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	015b      	lsls	r3, r3, #5
 8004c18:	0d1b      	lsrs	r3, r3, #20
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c22:	e054      	b.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c2a:	d050      	beq.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c2c:	f7fe f94e 	bl	8002ecc <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d902      	bls.n	8004c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d13d      	bne.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5a:	d111      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c64:	d004      	beq.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6e:	d107      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c88:	d10f      	bne.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e017      	b.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d19b      	bne.n	8004c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000244 	.word	0x20000244

08004cfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d10:	d111      	bne.n	8004d36 <SPI_EndRxTransaction+0x3a>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1a:	d004      	beq.n	8004d26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d24:	d107      	bne.n	8004d36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3e:	d12a      	bne.n	8004d96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d012      	beq.n	8004d70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff ff49 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d02d      	beq.n	8004dbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e026      	b.n	8004dbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2101      	movs	r1, #1
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff ff36 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01a      	beq.n	8004dbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e013      	b.n	8004dbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2101      	movs	r1, #1
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff ff23 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e000      	b.n	8004dbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <SPI_EndRxTxTransaction+0x7c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1b      	ldr	r2, [pc, #108]	; (8004e48 <SPI_EndRxTxTransaction+0x80>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	0d5b      	lsrs	r3, r3, #21
 8004de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df2:	d112      	bne.n	8004e1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff fef4 	bl	8004bec <SPI_WaitFlagStateUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e00f      	b.n	8004e3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d0f2      	beq.n	8004e1a <SPI_EndRxTxTransaction+0x52>
 8004e34:	e000      	b.n	8004e38 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e36:	bf00      	nop
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000244 	.word	0x20000244
 8004e48:	165e9f81 	.word	0x165e9f81

08004e4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d123      	bne.n	8004ea6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	6851      	ldr	r1, [r2, #4]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	6892      	ldr	r2, [r2, #8]
 8004e72:	4311      	orrs	r1, r2
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	68d2      	ldr	r2, [r2, #12]
 8004e78:	4311      	orrs	r1, r2
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	6912      	ldr	r2, [r2, #16]
 8004e7e:	4311      	orrs	r1, r2
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	6952      	ldr	r2, [r2, #20]
 8004e84:	4311      	orrs	r1, r2
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	6992      	ldr	r2, [r2, #24]
 8004e8a:	4311      	orrs	r1, r2
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	69d2      	ldr	r2, [r2, #28]
 8004e90:	4311      	orrs	r1, r2
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	6a12      	ldr	r2, [r2, #32]
 8004e96:	4311      	orrs	r1, r2
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e028      	b.n	8004ef8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	69d9      	ldr	r1, [r3, #28]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	4319      	orrs	r1, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ecc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	6851      	ldr	r1, [r2, #4]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	6892      	ldr	r2, [r2, #8]
 8004ed8:	4311      	orrs	r1, r2
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	68d2      	ldr	r2, [r2, #12]
 8004ede:	4311      	orrs	r1, r2
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	6912      	ldr	r2, [r2, #16]
 8004ee4:	4311      	orrs	r1, r2
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	6952      	ldr	r2, [r2, #20]
 8004eea:	4311      	orrs	r1, r2
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	6992      	ldr	r2, [r2, #24]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d128      	bne.n	8004f6a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	1e59      	subs	r1, r3, #1
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4319      	orrs	r1, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	4319      	orrs	r1, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	031b      	lsls	r3, r3, #12
 8004f42:	4319      	orrs	r1, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	4319      	orrs	r1, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	051b      	lsls	r3, r3, #20
 8004f56:	4319      	orrs	r1, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	430b      	orrs	r3, r1
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e02f      	b.n	8004fca <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	3a01      	subs	r2, #1
 8004f7c:	0311      	lsls	r1, r2, #12
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	6952      	ldr	r2, [r2, #20]
 8004f82:	3a01      	subs	r2, #1
 8004f84:	0512      	lsls	r2, r2, #20
 8004f86:	430a      	orrs	r2, r1
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1e59      	subs	r1, r3, #1
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	4319      	orrs	r1, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	4319      	orrs	r1, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	4319      	orrs	r1, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <__NVIC_SetPriority>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db0a      	blt.n	8005002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	490c      	ldr	r1, [pc, #48]	; (8005024 <__NVIC_SetPriority+0x4c>)
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005000:	e00a      	b.n	8005018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4908      	ldr	r1, [pc, #32]	; (8005028 <__NVIC_SetPriority+0x50>)
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	3b04      	subs	r3, #4
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	440b      	add	r3, r1
 8005016:	761a      	strb	r2, [r3, #24]
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000e100 	.word	0xe000e100
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005030:	2100      	movs	r1, #0
 8005032:	f06f 0004 	mvn.w	r0, #4
 8005036:	f7ff ffcf 	bl	8004fd8 <__NVIC_SetPriority>
#endif
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005046:	f3ef 8305 	mrs	r3, IPSR
 800504a:	603b      	str	r3, [r7, #0]
  return(result);
 800504c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005052:	f06f 0305 	mvn.w	r3, #5
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	e00c      	b.n	8005074 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800505a:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <osKernelInitialize+0x44>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <osKernelInitialize+0x44>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005068:	2300      	movs	r3, #0
 800506a:	607b      	str	r3, [r7, #4]
 800506c:	e002      	b.n	8005074 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005074:	687b      	ldr	r3, [r7, #4]
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20026614 	.word	0x20026614

08005088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800508e:	f3ef 8305 	mrs	r3, IPSR
 8005092:	603b      	str	r3, [r7, #0]
  return(result);
 8005094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800509a:	f06f 0305 	mvn.w	r3, #5
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	e010      	b.n	80050c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <osKernelStart+0x48>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d109      	bne.n	80050be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050aa:	f7ff ffbf 	bl	800502c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80050ae:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <osKernelStart+0x48>)
 80050b0:	2202      	movs	r2, #2
 80050b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050b4:	f001 fe40 	bl	8006d38 <vTaskStartScheduler>
      stat = osOK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	e002      	b.n	80050c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050c4:	687b      	ldr	r3, [r7, #4]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20026614 	.word	0x20026614

080050d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08e      	sub	sp, #56	; 0x38
 80050d8:	af04      	add	r7, sp, #16
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e4:	f3ef 8305 	mrs	r3, IPSR
 80050e8:	617b      	str	r3, [r7, #20]
  return(result);
 80050ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d17e      	bne.n	80051ee <osThreadNew+0x11a>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d07b      	beq.n	80051ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050fa:	2318      	movs	r3, #24
 80050fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005106:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d045      	beq.n	800519a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <osThreadNew+0x48>
        name = attr->name;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <osThreadNew+0x6e>
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b38      	cmp	r3, #56	; 0x38
 8005134:	d805      	bhi.n	8005142 <osThreadNew+0x6e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <osThreadNew+0x72>
        return (NULL);
 8005142:	2300      	movs	r3, #0
 8005144:	e054      	b.n	80051f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00e      	beq.n	800517c <osThreadNew+0xa8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b5b      	cmp	r3, #91	; 0x5b
 8005164:	d90a      	bls.n	800517c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <osThreadNew+0xa8>
        mem = 1;
 8005176:	2301      	movs	r3, #1
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	e010      	b.n	800519e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10c      	bne.n	800519e <osThreadNew+0xca>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d108      	bne.n	800519e <osThreadNew+0xca>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <osThreadNew+0xca>
          mem = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e001      	b.n	800519e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d110      	bne.n	80051c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051ac:	9202      	str	r2, [sp, #8]
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6a3a      	ldr	r2, [r7, #32]
 80051b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f001 fbe6 	bl	800698c <xTaskCreateStatic>
 80051c0:	4603      	mov	r3, r0
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e013      	b.n	80051ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d110      	bne.n	80051ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	f107 0310 	add.w	r3, r7, #16
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f001 fc31 	bl	8006a46 <xTaskCreate>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <osThreadNew+0x11a>
            hTask = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051ee:	693b      	ldr	r3, [r7, #16]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3728      	adds	r7, #40	; 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005200:	f3ef 8305 	mrs	r3, IPSR
 8005204:	60bb      	str	r3, [r7, #8]
  return(result);
 8005206:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <osDelay+0x1c>
    stat = osErrorISR;
 800520c:	f06f 0305 	mvn.w	r3, #5
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e007      	b.n	8005224 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <osDelay+0x2c>
      vTaskDelay(ticks);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 fd56 	bl	8006cd0 <vTaskDelay>
    }
  }

  return (stat);
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f002 fef0 	bl	800801c <pvTimerGetTimerID>
 800523c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	6852      	ldr	r2, [r2, #4]
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
  }
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b08c      	sub	sp, #48	; 0x30
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	460b      	mov	r3, r1
 8005266:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800526c:	f3ef 8305 	mrs	r3, IPSR
 8005270:	613b      	str	r3, [r7, #16]
  return(result);
 8005272:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005274:	2b00      	cmp	r3, #0
 8005276:	d163      	bne.n	8005340 <osTimerNew+0xe8>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d060      	beq.n	8005340 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800527e:	2008      	movs	r0, #8
 8005280:	f003 f95a 	bl	8008538 <pvPortMalloc>
 8005284:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d059      	beq.n	8005340 <osTimerNew+0xe8>
      callb->func = func;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005298:	7afb      	ldrb	r3, [r7, #11]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e001      	b.n	80052a8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80052a4:	2301      	movs	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80052a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ac:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01c      	beq.n	80052f2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <osTimerNew+0x6e>
          name = attr->name;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <osTimerNew+0x84>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b2b      	cmp	r3, #43	; 0x2b
 80052d4:	d902      	bls.n	80052dc <osTimerNew+0x84>
          mem = 1;
 80052d6:	2301      	movs	r3, #1
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e00c      	b.n	80052f6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d108      	bne.n	80052f6 <osTimerNew+0x9e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <osTimerNew+0x9e>
            mem = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	e001      	b.n	80052f6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d10c      	bne.n	8005316 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <osTimerNew+0xf4>)
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	2101      	movs	r1, #1
 800530c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800530e:	f002 fb06 	bl	800791e <xTimerCreateStatic>
 8005312:	6238      	str	r0, [r7, #32]
 8005314:	e00b      	b.n	800532e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d108      	bne.n	800532e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <osTimerNew+0xf4>)
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	2101      	movs	r1, #1
 8005326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005328:	f002 fad8 	bl	80078dc <xTimerCreate>
 800532c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <osTimerNew+0xe8>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <osTimerNew+0xe8>
        vPortFree (callb);
 800533a:	6978      	ldr	r0, [r7, #20]
 800533c:	f003 f9c8 	bl	80086d0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005340:	6a3b      	ldr	r3, [r7, #32]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3728      	adds	r7, #40	; 0x28
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	0800522f 	.word	0x0800522f

08005350 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535e:	f3ef 8305 	mrs	r3, IPSR
 8005362:	60fb      	str	r3, [r7, #12]
  return(result);
 8005364:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <osTimerStart+0x22>
    stat = osErrorISR;
 800536a:	f06f 0305 	mvn.w	r3, #5
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e017      	b.n	80053a2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005378:	f06f 0303 	mvn.w	r3, #3
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e010      	b.n	80053a2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005380:	2300      	movs	r3, #0
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2300      	movs	r3, #0
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	2104      	movs	r1, #4
 800538a:	6938      	ldr	r0, [r7, #16]
 800538c:	f002 fb40 	bl	8007a10 <xTimerGenericCommand>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d102      	bne.n	800539c <osTimerStart+0x4c>
      stat = osOK;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e002      	b.n	80053a2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800539c:	f06f 0302 	mvn.w	r3, #2
 80053a0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80053a2:	697b      	ldr	r3, [r7, #20]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b8:	f3ef 8305 	mrs	r3, IPSR
 80053bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80053be:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d12d      	bne.n	8005420 <osEventFlagsNew+0x74>
    mem = -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d015      	beq.n	80053fc <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <osEventFlagsNew+0x3a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b1f      	cmp	r3, #31
 80053de:	d902      	bls.n	80053e6 <osEventFlagsNew+0x3a>
        mem = 1;
 80053e0:	2301      	movs	r3, #1
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	e00c      	b.n	8005400 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d108      	bne.n	8005400 <osEventFlagsNew+0x54>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <osEventFlagsNew+0x54>
          mem = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e001      	b.n	8005400 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d106      	bne.n	8005414 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f9fa 	bl	8005804 <xEventGroupCreateStatic>
 8005410:	6178      	str	r0, [r7, #20]
 8005412:	e005      	b.n	8005420 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800541a:	f000 fa2a 	bl	8005872 <xEventGroupCreate>
 800541e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005420:	697b      	ldr	r3, [r7, #20]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <osEventFlagsSet+0x1e>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800544a:	f06f 0303 	mvn.w	r3, #3
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e028      	b.n	80054a4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005452:	f3ef 8305 	mrs	r3, IPSR
 8005456:	60fb      	str	r3, [r7, #12]
  return(result);
 8005458:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01d      	beq.n	800549a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	461a      	mov	r2, r3
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6938      	ldr	r0, [r7, #16]
 800546c:	f000 fb10 	bl	8005a90 <xEventGroupSetBitsFromISR>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8005476:	f06f 0302 	mvn.w	r3, #2
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e012      	b.n	80054a4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <osEventFlagsSet+0x78>
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <osEventFlagsSet+0x84>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	e004      	b.n	80054a4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	6938      	ldr	r0, [r7, #16]
 800549e:	f000 fa5e 	bl	800595e <xEventGroupSetBits>
 80054a2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80054a4:	697b      	ldr	r3, [r7, #20]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <osEventFlagsGet>:
  }

  return (rflags);
}

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <osEventFlagsGet+0x18>
    rflags = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e00f      	b.n	80054ec <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054cc:	f3ef 8305 	mrs	r3, IPSR
 80054d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80054d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80054d8:	6938      	ldr	r0, [r7, #16]
 80054da:	f000 fa1c 	bl	8005916 <xEventGroupGetBitsFromISR>
 80054de:	6178      	str	r0, [r7, #20]
 80054e0:	e004      	b.n	80054ec <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80054e2:	2100      	movs	r1, #0
 80054e4:	6938      	ldr	r0, [r7, #16]
 80054e6:	f000 f9de 	bl	80058a6 <xEventGroupClearBits>
 80054ea:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80054ec:	697b      	ldr	r3, [r7, #20]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b088      	sub	sp, #32
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005502:	f3ef 8305 	mrs	r3, IPSR
 8005506:	60bb      	str	r3, [r7, #8]
  return(result);
 8005508:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800550a:	2b00      	cmp	r3, #0
 800550c:	d174      	bne.n	80055f8 <osMutexNew+0x102>
    if (attr != NULL) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e001      	b.n	8005520 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <osMutexNew+0x3a>
      rmtx = 1U;
 800552a:	2301      	movs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e001      	b.n	8005534 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d15c      	bne.n	80055f8 <osMutexNew+0x102>
      mem = -1;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005542:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d015      	beq.n	8005576 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <osMutexNew+0x6a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b4f      	cmp	r3, #79	; 0x4f
 8005558:	d902      	bls.n	8005560 <osMutexNew+0x6a>
          mem = 1;
 800555a:	2301      	movs	r3, #1
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	e00c      	b.n	800557a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <osMutexNew+0x84>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <osMutexNew+0x84>
            mem = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e001      	b.n	800557a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d112      	bne.n	80055a6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	4619      	mov	r1, r3
 800558c:	2004      	movs	r0, #4
 800558e:	f000 fcb6 	bl	8005efe <xQueueCreateMutexStatic>
 8005592:	61f8      	str	r0, [r7, #28]
 8005594:	e016      	b.n	80055c4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4619      	mov	r1, r3
 800559c:	2001      	movs	r0, #1
 800559e:	f000 fcae 	bl	8005efe <xQueueCreateMutexStatic>
 80055a2:	61f8      	str	r0, [r7, #28]
 80055a4:	e00e      	b.n	80055c4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80055b2:	2004      	movs	r0, #4
 80055b4:	f000 fc8b 	bl	8005ece <xQueueCreateMutex>
 80055b8:	61f8      	str	r0, [r7, #28]
 80055ba:	e003      	b.n	80055c4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80055bc:	2001      	movs	r0, #1
 80055be:	f000 fc86 	bl	8005ece <xQueueCreateMutex>
 80055c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00c      	beq.n	80055e4 <osMutexNew+0xee>
        if (attr != NULL) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <osMutexNew+0xe2>
          name = attr->name;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e001      	b.n	80055dc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80055dc:	68f9      	ldr	r1, [r7, #12]
 80055de:	69f8      	ldr	r0, [r7, #28]
 80055e0:	f001 f94c 	bl	800687c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <osMutexNew+0x102>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80055f8:	69fb      	ldr	r3, [r7, #28]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	; 0x28
 8005606:	af02      	add	r7, sp, #8
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	613b      	str	r3, [r7, #16]
  return(result);
 8005618:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d175      	bne.n	800570a <osSemaphoreNew+0x108>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d072      	beq.n	800570a <osSemaphoreNew+0x108>
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	429a      	cmp	r2, r3
 800562a:	d86e      	bhi.n	800570a <osSemaphoreNew+0x108>
    mem = -1;
 800562c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005630:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <osSemaphoreNew+0x4c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b4f      	cmp	r3, #79	; 0x4f
 8005646:	d902      	bls.n	800564e <osSemaphoreNew+0x4c>
        mem = 1;
 8005648:	2301      	movs	r3, #1
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	e00c      	b.n	8005668 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d108      	bne.n	8005668 <osSemaphoreNew+0x66>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <osSemaphoreNew+0x66>
          mem = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e001      	b.n	8005668 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800566e:	d04c      	beq.n	800570a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d128      	bne.n	80056c8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d10a      	bne.n	8005692 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2203      	movs	r2, #3
 8005682:	9200      	str	r2, [sp, #0]
 8005684:	2200      	movs	r2, #0
 8005686:	2100      	movs	r1, #0
 8005688:	2001      	movs	r0, #1
 800568a:	f000 fb31 	bl	8005cf0 <xQueueGenericCreateStatic>
 800568e:	61f8      	str	r0, [r7, #28]
 8005690:	e005      	b.n	800569e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005692:	2203      	movs	r2, #3
 8005694:	2100      	movs	r1, #0
 8005696:	2001      	movs	r0, #1
 8005698:	f000 fba2 	bl	8005de0 <xQueueGenericCreate>
 800569c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d022      	beq.n	80056ea <osSemaphoreNew+0xe8>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01f      	beq.n	80056ea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056aa:	2300      	movs	r3, #0
 80056ac:	2200      	movs	r2, #0
 80056ae:	2100      	movs	r1, #0
 80056b0:	69f8      	ldr	r0, [r7, #28]
 80056b2:	f000 fca9 	bl	8006008 <xQueueGenericSend>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d016      	beq.n	80056ea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80056bc:	69f8      	ldr	r0, [r7, #28]
 80056be:	f000 ffa9 	bl	8006614 <vQueueDelete>
            hSemaphore = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	e010      	b.n	80056ea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d108      	bne.n	80056e0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fc2c 	bl	8005f34 <xQueueCreateCountingSemaphoreStatic>
 80056dc:	61f8      	str	r0, [r7, #28]
 80056de:	e004      	b.n	80056ea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fc5d 	bl	8005fa2 <xQueueCreateCountingSemaphore>
 80056e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <osSemaphoreNew+0xfc>
          name = attr->name;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e001      	b.n	8005702 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005702:	6979      	ldr	r1, [r7, #20]
 8005704:	69f8      	ldr	r0, [r7, #28]
 8005706:	f001 f8b9 	bl	800687c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800570a:	69fb      	ldr	r3, [r7, #28]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800572a:	f06f 0303 	mvn.w	r3, #3
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e02c      	b.n	800578c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005732:	f3ef 8305 	mrs	r3, IPSR
 8005736:	60fb      	str	r3, [r7, #12]
  return(result);
 8005738:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01a      	beq.n	8005774 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	4619      	mov	r1, r3
 8005748:	6938      	ldr	r0, [r7, #16]
 800574a:	f000 fdf6 	bl	800633a <xQueueGiveFromISR>
 800574e:	4603      	mov	r3, r0
 8005750:	2b01      	cmp	r3, #1
 8005752:	d003      	beq.n	800575c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005754:	f06f 0302 	mvn.w	r3, #2
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e017      	b.n	800578c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <osSemaphoreRelease+0x78>
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <osSemaphoreRelease+0x84>)
 8005764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	e00b      	b.n	800578c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005774:	2300      	movs	r3, #0
 8005776:	2200      	movs	r2, #0
 8005778:	2100      	movs	r1, #0
 800577a:	6938      	ldr	r0, [r7, #16]
 800577c:	f000 fc44 	bl	8006008 <xQueueGenericSend>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d002      	beq.n	800578c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005786:	f06f 0302 	mvn.w	r3, #2
 800578a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800578c:	697b      	ldr	r3, [r7, #20]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80057ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4a06      	ldr	r2, [pc, #24]	; (80057cc <vApplicationGetIdleTaskMemory+0x30>)
 80057b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2280      	movs	r2, #128	; 0x80
 80057b8:	601a      	str	r2, [r3, #0]
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20026618 	.word	0x20026618
 80057cc:	20026674 	.word	0x20026674

080057d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4a07      	ldr	r2, [pc, #28]	; (80057fc <vApplicationGetTimerTaskMemory+0x2c>)
 80057e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4a06      	ldr	r2, [pc, #24]	; (8005800 <vApplicationGetTimerTaskMemory+0x30>)
 80057e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20026874 	.word	0x20026874
 8005800:	200268d0 	.word	0x200268d0

08005804 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005828:	2320      	movs	r3, #32
 800582a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b20      	cmp	r3, #32
 8005830:	d00a      	beq.n	8005848 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60fb      	str	r3, [r7, #12]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3304      	adds	r3, #4
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f92b 	bl	8005ab8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2201      	movs	r2, #1
 8005866:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005868:	697b      	ldr	r3, [r7, #20]
	}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005878:	2020      	movs	r0, #32
 800587a:	f002 fe5d 	bl	8008538 <pvPortMalloc>
 800587e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f911 	bl	8005ab8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800589c:	687b      	ldr	r3, [r7, #4]
	}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <xEventGroupClearBits+0x2a>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60fb      	str	r3, [r7, #12]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <xEventGroupClearBits+0x4a>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	60bb      	str	r3, [r7, #8]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80058f0:	f002 fd00 	bl	80082f4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	43db      	mvns	r3, r3
 8005902:	401a      	ands	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005908:	f002 fd24 	bl	8008354 <vPortExitCritical>

	return uxReturn;
 800590c:	693b      	ldr	r3, [r7, #16]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005916:	b480      	push	{r7}
 8005918:	b089      	sub	sp, #36	; 0x24
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005922:	f3ef 8211 	mrs	r2, BASEPRI
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60fa      	str	r2, [r7, #12]
 8005938:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800593a:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800593c:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800594e:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005950:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005952:	4618      	mov	r0, r3
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b08e      	sub	sp, #56	; 0x38
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005968:	2300      	movs	r3, #0
 800596a:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <xEventGroupSetBits+0x32>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	613b      	str	r3, [r7, #16]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <xEventGroupSetBits+0x52>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	3304      	adds	r3, #4
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	3308      	adds	r3, #8
 80059ba:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80059bc:	f001 fa22 	bl	8006e04 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80059d2:	e03c      	b.n	8005a4e <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80059d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059ea:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059f2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0e:	e008      	b.n	8005a22 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d101      	bne.n	8005a22 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a42:	4619      	mov	r1, r3
 8005a44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a46:	f001 fc65 	bl	8007314 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d1be      	bne.n	80059d4 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	401a      	ands	r2, r3
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005a64:	f001 f9dc 	bl	8006e20 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3738      	adds	r7, #56	; 0x38
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff6c 	bl	800595e <xEventGroupSetBits>
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	68f9      	ldr	r1, [r7, #12]
 8005aa2:	4804      	ldr	r0, [pc, #16]	; (8005ab4 <xEventGroupSetBitsFromISR+0x24>)
 8005aa4:	f002 fada 	bl	800805c <xTimerPendFunctionCallFromISR>
 8005aa8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005aaa:	697b      	ldr	r3, [r7, #20]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08005a75 	.word	0x08005a75

08005ab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f103 0208 	add.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f103 0208 	add.w	r2, r3, #8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f103 0208 	add.w	r2, r3, #8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b70:	d103      	bne.n	8005b7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e00c      	b.n	8005b94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e002      	b.n	8005b88 <vListInsert+0x2e>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d2f6      	bcs.n	8005b82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6892      	ldr	r2, [r2, #8]
 8005be2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6852      	ldr	r2, [r2, #4]
 8005bec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d103      	bne.n	8005c00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	1e5a      	subs	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <xQueueGenericReset+0x2a>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	60bb      	str	r3, [r7, #8]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c4a:	f002 fb53 	bl	80082f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	441a      	add	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	68f9      	ldr	r1, [r7, #12]
 8005c7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c80:	fb01 f303 	mul.w	r3, r1, r3
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	22ff      	movs	r2, #255	; 0xff
 8005c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	22ff      	movs	r2, #255	; 0xff
 8005c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d114      	bne.n	8005cca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01a      	beq.n	8005cde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3310      	adds	r3, #16
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 facd 	bl	800724c <xTaskRemoveFromEventList>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d012      	beq.n	8005cde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <xQueueGenericReset+0xcc>)
 8005cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	e009      	b.n	8005cde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3310      	adds	r3, #16
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fef2 	bl	8005ab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3324      	adds	r3, #36	; 0x24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff feed 	bl	8005ab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cde:	f002 fb39 	bl	8008354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ce2:	2301      	movs	r3, #1
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08e      	sub	sp, #56	; 0x38
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <xQueueGenericCreateStatic+0x52>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <xQueueGenericCreateStatic+0x56>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <xQueueGenericCreateStatic+0x58>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	623b      	str	r3, [r7, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <xQueueGenericCreateStatic+0x7e>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <xQueueGenericCreateStatic+0x82>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <xQueueGenericCreateStatic+0x84>
 8005d72:	2300      	movs	r3, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	61fb      	str	r3, [r7, #28]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d8e:	2350      	movs	r3, #80	; 0x50
 8005d90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d00a      	beq.n	8005dae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	61bb      	str	r3, [r7, #24]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f83f 	bl	8005e54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3730      	adds	r7, #48	; 0x30
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	613b      	str	r3, [r7, #16]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	3350      	adds	r3, #80	; 0x50
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f002 fb8d 	bl	8008538 <pvPortMalloc>
 8005e1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d011      	beq.n	8005e4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	3350      	adds	r3, #80	; 0x50
 8005e2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e38:	79fa      	ldrb	r2, [r7, #7]
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f805 	bl	8005e54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d103      	bne.n	8005e70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e002      	b.n	8005e76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e82:	2101      	movs	r1, #1
 8005e84:	69b8      	ldr	r0, [r7, #24]
 8005e86:	f7ff fecb 	bl	8005c20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	78fa      	ldrb	r2, [r7, #3]
 8005e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00e      	beq.n	8005ec6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8a1 	bl	8006008 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6939      	ldr	r1, [r7, #16]
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7ff ff7a 	bl	8005de0 <xQueueGenericCreate>
 8005eec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff ffd3 	bl	8005e9a <prvInitialiseMutex>

		return xNewQueue;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
	}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b088      	sub	sp, #32
 8005f02:	af02      	add	r7, sp, #8
 8005f04:	4603      	mov	r3, r0
 8005f06:	6039      	str	r1, [r7, #0]
 8005f08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	6939      	ldr	r1, [r7, #16]
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f7ff fee7 	bl	8005cf0 <xQueueGenericCreateStatic>
 8005f22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff ffb8 	bl	8005e9a <prvInitialiseMutex>

		return xNewQueue;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
	}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	61bb      	str	r3, [r7, #24]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d90a      	bls.n	8005f7a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	617b      	str	r3, [r7, #20]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	2100      	movs	r1, #0
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff feb3 	bl	8005cf0 <xQueueGenericCreateStatic>
 8005f8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f98:	69fb      	ldr	r3, [r7, #28]
	}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	613b      	str	r3, [r7, #16]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d90a      	bls.n	8005fe6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60fb      	str	r3, [r7, #12]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fef8 	bl	8005de0 <xQueueGenericCreate>
 8005ff0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ffe:	697b      	ldr	r3, [r7, #20]
	}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006016:	2300      	movs	r3, #0
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <xQueueGenericSend+0x32>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <xQueueGenericSend+0x40>
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <xQueueGenericSend+0x44>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <xQueueGenericSend+0x46>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <xQueueGenericSend+0x60>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d103      	bne.n	8006076 <xQueueGenericSend+0x6e>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <xQueueGenericSend+0x72>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <xQueueGenericSend+0x74>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <xQueueGenericSend+0x8e>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	623b      	str	r3, [r7, #32]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006096:	f001 faf9 	bl	800768c <xTaskGetSchedulerState>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <xQueueGenericSend+0x9e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <xQueueGenericSend+0xa2>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGenericSend+0xa4>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	61fb      	str	r3, [r7, #28]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060c6:	f002 f915 	bl	80082f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d302      	bcc.n	80060dc <xQueueGenericSend+0xd4>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d129      	bne.n	8006130 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e2:	f000 faba 	bl	800665a <prvCopyDataToQueue>
 80060e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d010      	beq.n	8006112 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	3324      	adds	r3, #36	; 0x24
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f8a9 	bl	800724c <xTaskRemoveFromEventList>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d013      	beq.n	8006128 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006100:	4b3f      	ldr	r3, [pc, #252]	; (8006200 <xQueueGenericSend+0x1f8>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	e00a      	b.n	8006128 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006118:	4b39      	ldr	r3, [pc, #228]	; (8006200 <xQueueGenericSend+0x1f8>)
 800611a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006128:	f002 f914 	bl	8008354 <vPortExitCritical>
				return pdPASS;
 800612c:	2301      	movs	r3, #1
 800612e:	e063      	b.n	80061f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006136:	f002 f90d 	bl	8008354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800613a:	2300      	movs	r3, #0
 800613c:	e05c      	b.n	80061f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006144:	f107 0314 	add.w	r3, r7, #20
 8006148:	4618      	mov	r0, r3
 800614a:	f001 f945 	bl	80073d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800614e:	2301      	movs	r3, #1
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006152:	f002 f8ff 	bl	8008354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006156:	f000 fe55 	bl	8006e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800615a:	f002 f8cb 	bl	80082f4 <vPortEnterCritical>
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006164:	b25b      	sxtb	r3, r3
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800616a:	d103      	bne.n	8006174 <xQueueGenericSend+0x16c>
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800617a:	b25b      	sxtb	r3, r3
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006180:	d103      	bne.n	800618a <xQueueGenericSend+0x182>
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800618a:	f002 f8e3 	bl	8008354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800618e:	1d3a      	adds	r2, r7, #4
 8006190:	f107 0314 	add.w	r3, r7, #20
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f001 f934 	bl	8007404 <xTaskCheckForTimeOut>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d124      	bne.n	80061ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061a4:	f000 fb51 	bl	800684a <prvIsQueueFull>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d018      	beq.n	80061e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	3310      	adds	r3, #16
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4611      	mov	r1, r2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fff8 	bl	80071ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061be:	f000 fadc 	bl	800677a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061c2:	f000 fe2d 	bl	8006e20 <xTaskResumeAll>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f47f af7c 	bne.w	80060c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <xQueueGenericSend+0x1f8>)
 80061d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	e772      	b.n	80060c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e2:	f000 faca 	bl	800677a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061e6:	f000 fe1b 	bl	8006e20 <xTaskResumeAll>
 80061ea:	e76c      	b.n	80060c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ee:	f000 fac4 	bl	800677a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061f2:	f000 fe15 	bl	8006e20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3738      	adds	r7, #56	; 0x38
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b090      	sub	sp, #64	; 0x40
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <xQueueGenericSendFromISR+0x3c>
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <xQueueGenericSendFromISR+0x40>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <xQueueGenericSendFromISR+0x42>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d103      	bne.n	800626e <xQueueGenericSendFromISR+0x6a>
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <xQueueGenericSendFromISR+0x6e>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueGenericSendFromISR+0x70>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	623b      	str	r3, [r7, #32]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800628e:	f002 f913 	bl	80084b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006292:	f3ef 8211 	mrs	r2, BASEPRI
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	61fa      	str	r2, [r7, #28]
 80062a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80062aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d302      	bcc.n	80062c0 <xQueueGenericSendFromISR+0xbc>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d12f      	bne.n	8006320 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062d6:	f000 f9c0 	bl	800665a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e2:	d112      	bne.n	800630a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	3324      	adds	r3, #36	; 0x24
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 ffab 	bl	800724c <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e007      	b.n	800631a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800630a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800630e:	3301      	adds	r3, #1
 8006310:	b2db      	uxtb	r3, r3
 8006312:	b25a      	sxtb	r2, r3
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800631a:	2301      	movs	r3, #1
 800631c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800631e:	e001      	b.n	8006324 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006320:	2300      	movs	r3, #0
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f383 8811 	msr	BASEPRI, r3
}
 800632e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006332:	4618      	mov	r0, r3
 8006334:	3740      	adds	r7, #64	; 0x40
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b08e      	sub	sp, #56	; 0x38
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	623b      	str	r3, [r7, #32]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <xQueueGiveFromISR+0x48>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	61fb      	str	r3, [r7, #28]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <xQueueGiveFromISR+0x58>
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <xQueueGiveFromISR+0x5c>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <xQueueGiveFromISR+0x5e>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	61bb      	str	r3, [r7, #24]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063b2:	f002 f881 	bl	80084b8 <vPortValidateInterruptPriority>
	__asm volatile
 80063b6:	f3ef 8211 	mrs	r2, BASEPRI
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	617a      	str	r2, [r7, #20]
 80063cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80063ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063de:	429a      	cmp	r2, r3
 80063e0:	d22b      	bcs.n	800643a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063fc:	d112      	bne.n	8006424 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	3324      	adds	r3, #36	; 0x24
 800640a:	4618      	mov	r0, r3
 800640c:	f000 ff1e 	bl	800724c <xTaskRemoveFromEventList>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e007      	b.n	8006434 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006428:	3301      	adds	r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	b25a      	sxtb	r2, r3
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006434:	2301      	movs	r3, #1
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
 8006438:	e001      	b.n	800643e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800643a:	2300      	movs	r3, #0
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f383 8811 	msr	BASEPRI, r3
}
 8006448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800644c:	4618      	mov	r0, r3
 800644e:	3738      	adds	r7, #56	; 0x38
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	; 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006460:	2300      	movs	r3, #0
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <xQueueReceive+0x30>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	623b      	str	r3, [r7, #32]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <xQueueReceive+0x3e>
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <xQueueReceive+0x42>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <xQueueReceive+0x44>
 8006496:	2300      	movs	r3, #0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xQueueReceive+0x5e>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	61fb      	str	r3, [r7, #28]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064b2:	f001 f8eb 	bl	800768c <xTaskGetSchedulerState>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d102      	bne.n	80064c2 <xQueueReceive+0x6e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <xQueueReceive+0x72>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <xQueueReceive+0x74>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <xQueueReceive+0x8e>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	61bb      	str	r3, [r7, #24]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064e2:	f001 ff07 	bl	80082f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01f      	beq.n	8006532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f6:	f000 f91a 	bl	800672e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1e5a      	subs	r2, r3, #1
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00f      	beq.n	800652a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	3310      	adds	r3, #16
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fe9c 	bl	800724c <xTaskRemoveFromEventList>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800651a:	4b3d      	ldr	r3, [pc, #244]	; (8006610 <xQueueReceive+0x1bc>)
 800651c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800652a:	f001 ff13 	bl	8008354 <vPortExitCritical>
				return pdPASS;
 800652e:	2301      	movs	r3, #1
 8006530:	e069      	b.n	8006606 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006538:	f001 ff0c 	bl	8008354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800653c:	2300      	movs	r3, #0
 800653e:	e062      	b.n	8006606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006546:	f107 0310 	add.w	r3, r7, #16
 800654a:	4618      	mov	r0, r3
 800654c:	f000 ff44 	bl	80073d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006554:	f001 fefe 	bl	8008354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006558:	f000 fc54 	bl	8006e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800655c:	f001 feca 	bl	80082f4 <vPortEnterCritical>
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006566:	b25b      	sxtb	r3, r3
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800656c:	d103      	bne.n	8006576 <xQueueReceive+0x122>
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800657c:	b25b      	sxtb	r3, r3
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006582:	d103      	bne.n	800658c <xQueueReceive+0x138>
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800658c:	f001 fee2 	bl	8008354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006590:	1d3a      	adds	r2, r7, #4
 8006592:	f107 0310 	add.w	r3, r7, #16
 8006596:	4611      	mov	r1, r2
 8006598:	4618      	mov	r0, r3
 800659a:	f000 ff33 	bl	8007404 <xTaskCheckForTimeOut>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d123      	bne.n	80065ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a6:	f000 f93a 	bl	800681e <prvIsQueueEmpty>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d017      	beq.n	80065e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	3324      	adds	r3, #36	; 0x24
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fdf7 	bl	80071ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c0:	f000 f8db 	bl	800677a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065c4:	f000 fc2c 	bl	8006e20 <xTaskResumeAll>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d189      	bne.n	80064e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065ce:	4b10      	ldr	r3, [pc, #64]	; (8006610 <xQueueReceive+0x1bc>)
 80065d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	e780      	b.n	80064e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e2:	f000 f8ca 	bl	800677a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065e6:	f000 fc1b 	bl	8006e20 <xTaskResumeAll>
 80065ea:	e77a      	b.n	80064e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ee:	f000 f8c4 	bl	800677a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065f2:	f000 fc15 	bl	8006e20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f8:	f000 f911 	bl	800681e <prvIsQueueEmpty>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f43f af6f 	beq.w	80064e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006606:	4618      	mov	r0, r3
 8006608:	3730      	adds	r7, #48	; 0x30
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <vQueueDelete+0x28>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f947 	bl	80068d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f002 f83f 	bl	80086d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10d      	bne.n	8006694 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d14d      	bne.n	800671c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f001 f81f 	bl	80076c8 <xTaskPriorityDisinherit>
 800668a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	609a      	str	r2, [r3, #8]
 8006692:	e043      	b.n	800671c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d119      	bne.n	80066ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6858      	ldr	r0, [r3, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	461a      	mov	r2, r3
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	f002 f963 	bl	8008970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	441a      	add	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d32b      	bcc.n	800671c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	e026      	b.n	800671c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	68d8      	ldr	r0, [r3, #12]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	461a      	mov	r2, r3
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	f002 f949 	bl	8008970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	425b      	negs	r3, r3
 80066e8:	441a      	add	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d207      	bcs.n	800670a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	425b      	negs	r3, r3
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d105      	bne.n	800671c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3b01      	subs	r3, #1
 800671a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006724:	697b      	ldr	r3, [r7, #20]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d018      	beq.n	8006772 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	441a      	add	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	d303      	bcc.n	8006762 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68d9      	ldr	r1, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	461a      	mov	r2, r3
 800676c:	6838      	ldr	r0, [r7, #0]
 800676e:	f002 f8ff 	bl	8008970 <memcpy>
	}
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006782:	f001 fdb7 	bl	80082f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800678e:	e011      	b.n	80067b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	d012      	beq.n	80067be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3324      	adds	r3, #36	; 0x24
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fd55 	bl	800724c <xTaskRemoveFromEventList>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067a8:	f000 fe8e 	bl	80074c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dce9      	bgt.n	8006790 <prvUnlockQueue+0x16>
 80067bc:	e000      	b.n	80067c0 <prvUnlockQueue+0x46>
					break;
 80067be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	22ff      	movs	r2, #255	; 0xff
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067c8:	f001 fdc4 	bl	8008354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067cc:	f001 fd92 	bl	80082f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d8:	e011      	b.n	80067fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d012      	beq.n	8006808 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3310      	adds	r3, #16
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fd30 	bl	800724c <xTaskRemoveFromEventList>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067f2:	f000 fe69 	bl	80074c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006802:	2b00      	cmp	r3, #0
 8006804:	dce9      	bgt.n	80067da <prvUnlockQueue+0x60>
 8006806:	e000      	b.n	800680a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006808:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	22ff      	movs	r2, #255	; 0xff
 800680e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006812:	f001 fd9f 	bl	8008354 <vPortExitCritical>
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006826:	f001 fd65 	bl	80082f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006832:	2301      	movs	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e001      	b.n	800683c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800683c:	f001 fd8a 	bl	8008354 <vPortExitCritical>

	return xReturn;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006852:	f001 fd4f 	bl	80082f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	429a      	cmp	r2, r3
 8006860:	d102      	bne.n	8006868 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e001      	b.n	800686c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800686c:	f001 fd72 	bl	8008354 <vPortExitCritical>

	return xReturn;
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e014      	b.n	80068b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800688c:	4a0f      	ldr	r2, [pc, #60]	; (80068cc <vQueueAddToRegistry+0x50>)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006898:	490c      	ldr	r1, [pc, #48]	; (80068cc <vQueueAddToRegistry+0x50>)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068a2:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <vQueueAddToRegistry+0x50>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068ae:	e006      	b.n	80068be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b07      	cmp	r3, #7
 80068ba:	d9e7      	bls.n	800688c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20026cd0 	.word	0x20026cd0

080068d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e016      	b.n	800690c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068de:	4a10      	ldr	r2, [pc, #64]	; (8006920 <vQueueUnregisterQueue+0x50>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	4413      	add	r3, r2
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d10b      	bne.n	8006906 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068ee:	4a0c      	ldr	r2, [pc, #48]	; (8006920 <vQueueUnregisterQueue+0x50>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2100      	movs	r1, #0
 80068f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <vQueueUnregisterQueue+0x50>)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4413      	add	r3, r2
 8006900:	2200      	movs	r2, #0
 8006902:	605a      	str	r2, [r3, #4]
				break;
 8006904:	e006      	b.n	8006914 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b07      	cmp	r3, #7
 8006910:	d9e5      	bls.n	80068de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006912:	bf00      	nop
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20026cd0 	.word	0x20026cd0

08006924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006934:	f001 fcde 	bl	80082f4 <vPortEnterCritical>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800693e:	b25b      	sxtb	r3, r3
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006944:	d103      	bne.n	800694e <vQueueWaitForMessageRestricted+0x2a>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006954:	b25b      	sxtb	r3, r3
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800695a:	d103      	bne.n	8006964 <vQueueWaitForMessageRestricted+0x40>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006964:	f001 fcf6 	bl	8008354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	3324      	adds	r3, #36	; 0x24
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fc3b 	bl	80071f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f7ff fefb 	bl	800677a <prvUnlockQueue>
	}
 8006984:	bf00      	nop
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af04      	add	r7, sp, #16
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	623b      	str	r3, [r7, #32]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61fb      	str	r3, [r7, #28]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069d2:	235c      	movs	r3, #92	; 0x5c
 80069d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b5c      	cmp	r3, #92	; 0x5c
 80069da:	d00a      	beq.n	80069f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	61bb      	str	r3, [r7, #24]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01e      	beq.n	8006a38 <xTaskCreateStatic+0xac>
 80069fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a12:	2300      	movs	r3, #0
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	f107 0314 	add.w	r3, r7, #20
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f850 	bl	8006ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a32:	f000 f8dd 	bl	8006bf0 <prvAddNewTaskToReadyList>
 8006a36:	e001      	b.n	8006a3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a3c:	697b      	ldr	r3, [r7, #20]
	}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3728      	adds	r7, #40	; 0x28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b08c      	sub	sp, #48	; 0x30
 8006a4a:	af04      	add	r7, sp, #16
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fd6c 	bl	8008538 <pvPortMalloc>
 8006a60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a68:	205c      	movs	r0, #92	; 0x5c
 8006a6a:	f001 fd65 	bl	8008538 <pvPortMalloc>
 8006a6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a7c:	e005      	b.n	8006a8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a7e:	6978      	ldr	r0, [r7, #20]
 8006a80:	f001 fe26 	bl	80086d0 <vPortFree>
 8006a84:	e001      	b.n	8006a8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d017      	beq.n	8006ac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a98:	88fa      	ldrh	r2, [r7, #6]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f80e 	bl	8006ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab4:	69f8      	ldr	r0, [r7, #28]
 8006ab6:	f000 f89b 	bl	8006bf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006aba:	2301      	movs	r3, #1
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	e002      	b.n	8006ac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	21a5      	movs	r1, #165	; 0xa5
 8006aea:	f001 ff0f 	bl	800890c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006af8:	3b01      	subs	r3, #1
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f023 0307 	bic.w	r3, r3, #7
 8006b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	617b      	str	r3, [r7, #20]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01f      	beq.n	8006b6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	e012      	b.n	8006b5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	7819      	ldrb	r1, [r3, #0]
 8006b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	3334      	adds	r3, #52	; 0x34
 8006b44:	460a      	mov	r2, r1
 8006b46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d006      	beq.n	8006b62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b0f      	cmp	r3, #15
 8006b5e:	d9e9      	bls.n	8006b34 <prvInitialiseNewTask+0x64>
 8006b60:	e000      	b.n	8006b64 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b6c:	e003      	b.n	8006b76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	2b37      	cmp	r3, #55	; 0x37
 8006b7a:	d901      	bls.n	8006b80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b7c:	2337      	movs	r3, #55	; 0x37
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2200      	movs	r2, #0
 8006b90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	3304      	adds	r3, #4
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe ffae 	bl	8005af8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	3318      	adds	r3, #24
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fe ffa9 	bl	8005af8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	69b8      	ldr	r0, [r7, #24]
 8006bd0:	f001 fa64 	bl	800809c <pxPortInitialiseStack>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be6:	bf00      	nop
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf8:	f001 fb7c 	bl	80082f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bfc:	4b2d      	ldr	r3, [pc, #180]	; (8006cb4 <prvAddNewTaskToReadyList+0xc4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	4a2c      	ldr	r2, [pc, #176]	; (8006cb4 <prvAddNewTaskToReadyList+0xc4>)
 8006c04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c06:	4b2c      	ldr	r3, [pc, #176]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c0e:	4a2a      	ldr	r2, [pc, #168]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c14:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <prvAddNewTaskToReadyList+0xc4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d110      	bne.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c1c:	f000 fc78 	bl	8007510 <prvInitialiseTaskLists>
 8006c20:	e00d      	b.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c22:	4b26      	ldr	r3, [pc, #152]	; (8006cbc <prvAddNewTaskToReadyList+0xcc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c2a:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d802      	bhi.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c38:	4a1f      	ldr	r2, [pc, #124]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c3e:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <prvAddNewTaskToReadyList+0xd0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a1e      	ldr	r2, [pc, #120]	; (8006cc0 <prvAddNewTaskToReadyList+0xd0>)
 8006c46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <prvAddNewTaskToReadyList+0xd0>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <prvAddNewTaskToReadyList+0xd4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d903      	bls.n	8006c64 <prvAddNewTaskToReadyList+0x74>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <prvAddNewTaskToReadyList+0xd4>)
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <prvAddNewTaskToReadyList+0xd8>)
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f7fe ff49 	bl	8005b12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c80:	f001 fb68 	bl	8008354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <prvAddNewTaskToReadyList+0xcc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d207      	bcs.n	8006caa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <prvAddNewTaskToReadyList+0xdc>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200271e4 	.word	0x200271e4
 8006cb8:	20026d10 	.word	0x20026d10
 8006cbc:	200271f0 	.word	0x200271f0
 8006cc0:	20027200 	.word	0x20027200
 8006cc4:	200271ec 	.word	0x200271ec
 8006cc8:	20026d14 	.word	0x20026d14
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d017      	beq.n	8006d12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <vTaskDelay+0x60>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <vTaskDelay+0x30>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60bb      	str	r3, [r7, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d00:	f000 f880 	bl	8006e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d04:	2100      	movs	r1, #0
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fd4c 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d0c:	f000 f888 	bl	8006e20 <xTaskResumeAll>
 8006d10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d107      	bne.n	8006d28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <vTaskDelay+0x64>)
 8006d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	2002720c 	.word	0x2002720c
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d46:	463a      	mov	r2, r7
 8006d48:	1d39      	adds	r1, r7, #4
 8006d4a:	f107 0308 	add.w	r3, r7, #8
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fd24 	bl	800579c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	9202      	str	r2, [sp, #8]
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	2300      	movs	r3, #0
 8006d64:	460a      	mov	r2, r1
 8006d66:	4921      	ldr	r1, [pc, #132]	; (8006dec <vTaskStartScheduler+0xb4>)
 8006d68:	4821      	ldr	r0, [pc, #132]	; (8006df0 <vTaskStartScheduler+0xb8>)
 8006d6a:	f7ff fe0f 	bl	800698c <xTaskCreateStatic>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4a20      	ldr	r2, [pc, #128]	; (8006df4 <vTaskStartScheduler+0xbc>)
 8006d72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d74:	4b1f      	ldr	r3, [pc, #124]	; (8006df4 <vTaskStartScheduler+0xbc>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	e001      	b.n	8006d86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d102      	bne.n	8006d92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d8c:	f000 fd5e 	bl	800784c <xTimerCreateTimerTask>
 8006d90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d116      	bne.n	8006dc6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	613b      	str	r3, [r7, #16]
}
 8006daa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dac:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <vTaskStartScheduler+0xc0>)
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006db2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <vTaskStartScheduler+0xc4>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <vTaskStartScheduler+0xc8>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dc0:	f001 f9f6 	bl	80081b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dc4:	e00e      	b.n	8006de4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dcc:	d10a      	bne.n	8006de4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	60fb      	str	r3, [r7, #12]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <vTaskStartScheduler+0xaa>
}
 8006de4:	bf00      	nop
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	08008c1c 	.word	0x08008c1c
 8006df0:	080074e1 	.word	0x080074e1
 8006df4:	20027208 	.word	0x20027208
 8006df8:	20027204 	.word	0x20027204
 8006dfc:	200271f0 	.word	0x200271f0
 8006e00:	200271e8 	.word	0x200271e8

08006e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e08:	4b04      	ldr	r3, [pc, #16]	; (8006e1c <vTaskSuspendAll+0x18>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	4a03      	ldr	r2, [pc, #12]	; (8006e1c <vTaskSuspendAll+0x18>)
 8006e10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	2002720c 	.word	0x2002720c

08006e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e2e:	4b42      	ldr	r3, [pc, #264]	; (8006f38 <xTaskResumeAll+0x118>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <xTaskResumeAll+0x2c>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	603b      	str	r3, [r7, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e4c:	f001 fa52 	bl	80082f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <xTaskResumeAll+0x118>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	4a38      	ldr	r2, [pc, #224]	; (8006f38 <xTaskResumeAll+0x118>)
 8006e58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e5a:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <xTaskResumeAll+0x118>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d162      	bne.n	8006f28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e62:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <xTaskResumeAll+0x11c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d05e      	beq.n	8006f28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e6a:	e02f      	b.n	8006ecc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6c:	4b34      	ldr	r3, [pc, #208]	; (8006f40 <xTaskResumeAll+0x120>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3318      	adds	r3, #24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe fea7 	bl	8005bcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3304      	adds	r3, #4
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fea2 	bl	8005bcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8c:	4b2d      	ldr	r3, [pc, #180]	; (8006f44 <xTaskResumeAll+0x124>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d903      	bls.n	8006e9c <xTaskResumeAll+0x7c>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <xTaskResumeAll+0x124>)
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <xTaskResumeAll+0x128>)
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f7fe fe2d 	bl	8005b12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <xTaskResumeAll+0x12c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d302      	bcc.n	8006ecc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ec6:	4b22      	ldr	r3, [pc, #136]	; (8006f50 <xTaskResumeAll+0x130>)
 8006ec8:	2201      	movs	r2, #1
 8006eca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ecc:	4b1c      	ldr	r3, [pc, #112]	; (8006f40 <xTaskResumeAll+0x120>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1cb      	bne.n	8006e6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006eda:	f000 fbb7 	bl	800764c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ede:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <xTaskResumeAll+0x134>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d010      	beq.n	8006f0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006eea:	f000 f847 	bl	8006f7c <xTaskIncrementTick>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ef4:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <xTaskResumeAll+0x130>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f1      	bne.n	8006eea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f06:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <xTaskResumeAll+0x134>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <xTaskResumeAll+0x130>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f18:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <xTaskResumeAll+0x138>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f28:	f001 fa14 	bl	8008354 <vPortExitCritical>

	return xAlreadyYielded;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2002720c 	.word	0x2002720c
 8006f3c:	200271e4 	.word	0x200271e4
 8006f40:	200271a4 	.word	0x200271a4
 8006f44:	200271ec 	.word	0x200271ec
 8006f48:	20026d14 	.word	0x20026d14
 8006f4c:	20026d10 	.word	0x20026d10
 8006f50:	200271f8 	.word	0x200271f8
 8006f54:	200271f4 	.word	0x200271f4
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <xTaskGetTickCount+0x1c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f68:	687b      	ldr	r3, [r7, #4]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	200271e8 	.word	0x200271e8

08006f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f86:	4b4f      	ldr	r3, [pc, #316]	; (80070c4 <xTaskIncrementTick+0x148>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 808f 	bne.w	80070ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f90:	4b4d      	ldr	r3, [pc, #308]	; (80070c8 <xTaskIncrementTick+0x14c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f98:	4a4b      	ldr	r2, [pc, #300]	; (80070c8 <xTaskIncrementTick+0x14c>)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d120      	bne.n	8006fe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fa4:	4b49      	ldr	r3, [pc, #292]	; (80070cc <xTaskIncrementTick+0x150>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	603b      	str	r3, [r7, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <xTaskIncrementTick+0x46>
 8006fc4:	4b41      	ldr	r3, [pc, #260]	; (80070cc <xTaskIncrementTick+0x150>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	4b41      	ldr	r3, [pc, #260]	; (80070d0 <xTaskIncrementTick+0x154>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a3f      	ldr	r2, [pc, #252]	; (80070cc <xTaskIncrementTick+0x150>)
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	4a3f      	ldr	r2, [pc, #252]	; (80070d0 <xTaskIncrementTick+0x154>)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	4b3e      	ldr	r3, [pc, #248]	; (80070d4 <xTaskIncrementTick+0x158>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	4a3d      	ldr	r2, [pc, #244]	; (80070d4 <xTaskIncrementTick+0x158>)
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	f000 fb33 	bl	800764c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fe6:	4b3c      	ldr	r3, [pc, #240]	; (80070d8 <xTaskIncrementTick+0x15c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d349      	bcc.n	8007084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff0:	4b36      	ldr	r3, [pc, #216]	; (80070cc <xTaskIncrementTick+0x150>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d104      	bne.n	8007004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffa:	4b37      	ldr	r3, [pc, #220]	; (80070d8 <xTaskIncrementTick+0x15c>)
 8006ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007000:	601a      	str	r2, [r3, #0]
					break;
 8007002:	e03f      	b.n	8007084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007004:	4b31      	ldr	r3, [pc, #196]	; (80070cc <xTaskIncrementTick+0x150>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d203      	bcs.n	8007024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800701c:	4a2e      	ldr	r2, [pc, #184]	; (80070d8 <xTaskIncrementTick+0x15c>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007022:	e02f      	b.n	8007084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	3304      	adds	r3, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fdcf 	bl	8005bcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	3318      	adds	r3, #24
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fdc6 	bl	8005bcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <xTaskIncrementTick+0x160>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d903      	bls.n	8007054 <xTaskIncrementTick+0xd8>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	4a22      	ldr	r2, [pc, #136]	; (80070dc <xTaskIncrementTick+0x160>)
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <xTaskIncrementTick+0x164>)
 8007062:	441a      	add	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	3304      	adds	r3, #4
 8007068:	4619      	mov	r1, r3
 800706a:	4610      	mov	r0, r2
 800706c:	f7fe fd51 	bl	8005b12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <xTaskIncrementTick+0x168>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	429a      	cmp	r2, r3
 800707c:	d3b8      	bcc.n	8006ff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800707e:	2301      	movs	r3, #1
 8007080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007082:	e7b5      	b.n	8006ff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007084:	4b17      	ldr	r3, [pc, #92]	; (80070e4 <xTaskIncrementTick+0x168>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708a:	4915      	ldr	r1, [pc, #84]	; (80070e0 <xTaskIncrementTick+0x164>)
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d901      	bls.n	80070a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070a0:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <xTaskIncrementTick+0x16c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e004      	b.n	80070b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <xTaskIncrementTick+0x170>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3301      	adds	r3, #1
 80070b4:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <xTaskIncrementTick+0x170>)
 80070b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070b8:	697b      	ldr	r3, [r7, #20]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	2002720c 	.word	0x2002720c
 80070c8:	200271e8 	.word	0x200271e8
 80070cc:	2002719c 	.word	0x2002719c
 80070d0:	200271a0 	.word	0x200271a0
 80070d4:	200271fc 	.word	0x200271fc
 80070d8:	20027204 	.word	0x20027204
 80070dc:	200271ec 	.word	0x200271ec
 80070e0:	20026d14 	.word	0x20026d14
 80070e4:	20026d10 	.word	0x20026d10
 80070e8:	200271f8 	.word	0x200271f8
 80070ec:	200271f4 	.word	0x200271f4

080070f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070f6:	4b28      	ldr	r3, [pc, #160]	; (8007198 <vTaskSwitchContext+0xa8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070fe:	4b27      	ldr	r3, [pc, #156]	; (800719c <vTaskSwitchContext+0xac>)
 8007100:	2201      	movs	r2, #1
 8007102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007104:	e041      	b.n	800718a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007106:	4b25      	ldr	r3, [pc, #148]	; (800719c <vTaskSwitchContext+0xac>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710c:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <vTaskSwitchContext+0xb0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e010      	b.n	8007136 <vTaskSwitchContext+0x46>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <vTaskSwitchContext+0x40>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <vTaskSwitchContext+0x3e>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3b01      	subs	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	491b      	ldr	r1, [pc, #108]	; (80071a4 <vTaskSwitchContext+0xb4>)
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0e4      	beq.n	8007114 <vTaskSwitchContext+0x24>
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a13      	ldr	r2, [pc, #76]	; (80071a4 <vTaskSwitchContext+0xb4>)
 8007156:	4413      	add	r3, r2
 8007158:	60bb      	str	r3, [r7, #8]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	605a      	str	r2, [r3, #4]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	3308      	adds	r3, #8
 800716c:	429a      	cmp	r2, r3
 800716e:	d104      	bne.n	800717a <vTaskSwitchContext+0x8a>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	605a      	str	r2, [r3, #4]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4a09      	ldr	r2, [pc, #36]	; (80071a8 <vTaskSwitchContext+0xb8>)
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	4a06      	ldr	r2, [pc, #24]	; (80071a0 <vTaskSwitchContext+0xb0>)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6013      	str	r3, [r2, #0]
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	2002720c 	.word	0x2002720c
 800719c:	200271f8 	.word	0x200271f8
 80071a0:	200271ec 	.word	0x200271ec
 80071a4:	20026d14 	.word	0x20026d14
 80071a8:	20026d10 	.word	0x20026d10

080071ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	60fb      	str	r3, [r7, #12]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <vTaskPlaceOnEventList+0x44>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3318      	adds	r3, #24
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fe fcbd 	bl	8005b5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071e0:	2101      	movs	r1, #1
 80071e2:	6838      	ldr	r0, [r7, #0]
 80071e4:	f000 fade 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20026d10 	.word	0x20026d10

080071f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	617b      	str	r3, [r7, #20]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <vTaskPlaceOnEventListRestricted+0x54>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3318      	adds	r3, #24
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7fe fc74 	bl	8005b12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007234:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68b8      	ldr	r0, [r7, #8]
 800723a:	f000 fab3 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
	}
 800723e:	bf00      	nop
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20026d10 	.word	0x20026d10

0800724c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60fb      	str	r3, [r7, #12]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3318      	adds	r3, #24
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe fca5 	bl	8005bcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007282:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <xTaskRemoveFromEventList+0xb0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d11d      	bne.n	80072c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fc9c 	bl	8005bcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4b19      	ldr	r3, [pc, #100]	; (8007300 <xTaskRemoveFromEventList+0xb4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d903      	bls.n	80072a8 <xTaskRemoveFromEventList+0x5c>
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	4a16      	ldr	r2, [pc, #88]	; (8007300 <xTaskRemoveFromEventList+0xb4>)
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4a13      	ldr	r2, [pc, #76]	; (8007304 <xTaskRemoveFromEventList+0xb8>)
 80072b6:	441a      	add	r2, r3
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f7fe fc27 	bl	8005b12 <vListInsertEnd>
 80072c4:	e005      	b.n	80072d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3318      	adds	r3, #24
 80072ca:	4619      	mov	r1, r3
 80072cc:	480e      	ldr	r0, [pc, #56]	; (8007308 <xTaskRemoveFromEventList+0xbc>)
 80072ce:	f7fe fc20 	bl	8005b12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <xTaskRemoveFromEventList+0xc0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	429a      	cmp	r2, r3
 80072de:	d905      	bls.n	80072ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <xTaskRemoveFromEventList+0xc4>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	e001      	b.n	80072f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072f0:	697b      	ldr	r3, [r7, #20]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	2002720c 	.word	0x2002720c
 8007300:	200271ec 	.word	0x200271ec
 8007304:	20026d14 	.word	0x20026d14
 8007308:	200271a4 	.word	0x200271a4
 800730c:	20026d10 	.word	0x20026d10
 8007310:	200271f8 	.word	0x200271f8

08007314 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	613b      	str	r3, [r7, #16]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60fb      	str	r3, [r7, #12]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fe fc2f 	bl	8005bcc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	3304      	adds	r3, #4
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fc2a 	bl	8005bcc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <vTaskRemoveFromUnorderedEventList+0x78>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a0f      	ldr	r2, [pc, #60]	; (80073c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4a0c      	ldr	r2, [pc, #48]	; (80073cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 800739a:	441a      	add	r2, r3
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7fe fbb5 	bl	8005b12 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d902      	bls.n	80073bc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]
	}
}
 80073bc:	bf00      	nop
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	2002720c 	.word	0x2002720c
 80073c8:	200271ec 	.word	0x200271ec
 80073cc:	20026d14 	.word	0x20026d14
 80073d0:	20026d10 	.word	0x20026d10
 80073d4:	200271f8 	.word	0x200271f8

080073d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <vTaskInternalSetTimeOutState+0x24>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <vTaskInternalSetTimeOutState+0x28>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	200271fc 	.word	0x200271fc
 8007400:	200271e8 	.word	0x200271e8

08007404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007446:	f000 ff55 	bl	80082f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800744a:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <xTaskCheckForTimeOut+0xbc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007462:	d102      	bne.n	800746a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	e023      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <xTaskCheckForTimeOut+0xc0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d007      	beq.n	8007486 <xTaskCheckForTimeOut+0x82>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e015      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	429a      	cmp	r2, r3
 800748e:	d20b      	bcs.n	80074a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ff9b 	bl	80073d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	e004      	b.n	80074b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074b2:	f000 ff4f 	bl	8008354 <vPortExitCritical>

	return xReturn;
 80074b6:	69fb      	ldr	r3, [r7, #28]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	200271e8 	.word	0x200271e8
 80074c4:	200271fc 	.word	0x200271fc

080074c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <vTaskMissedYield+0x14>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	200271f8 	.word	0x200271f8

080074e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e8:	f000 f852 	bl	8007590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <prvIdleTask+0x28>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d9f9      	bls.n	80074e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <prvIdleTask+0x2c>)
 80074f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007504:	e7f0      	b.n	80074e8 <prvIdleTask+0x8>
 8007506:	bf00      	nop
 8007508:	20026d14 	.word	0x20026d14
 800750c:	e000ed04 	.word	0xe000ed04

08007510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007516:	2300      	movs	r3, #0
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e00c      	b.n	8007536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4a12      	ldr	r2, [pc, #72]	; (8007570 <prvInitialiseTaskLists+0x60>)
 8007528:	4413      	add	r3, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fac4 	bl	8005ab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3301      	adds	r3, #1
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b37      	cmp	r3, #55	; 0x37
 800753a:	d9ef      	bls.n	800751c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800753c:	480d      	ldr	r0, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x64>)
 800753e:	f7fe fabb 	bl	8005ab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007542:	480d      	ldr	r0, [pc, #52]	; (8007578 <prvInitialiseTaskLists+0x68>)
 8007544:	f7fe fab8 	bl	8005ab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007548:	480c      	ldr	r0, [pc, #48]	; (800757c <prvInitialiseTaskLists+0x6c>)
 800754a:	f7fe fab5 	bl	8005ab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800754e:	480c      	ldr	r0, [pc, #48]	; (8007580 <prvInitialiseTaskLists+0x70>)
 8007550:	f7fe fab2 	bl	8005ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007554:	480b      	ldr	r0, [pc, #44]	; (8007584 <prvInitialiseTaskLists+0x74>)
 8007556:	f7fe faaf 	bl	8005ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <prvInitialiseTaskLists+0x78>)
 800755c:	4a05      	ldr	r2, [pc, #20]	; (8007574 <prvInitialiseTaskLists+0x64>)
 800755e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <prvInitialiseTaskLists+0x7c>)
 8007562:	4a05      	ldr	r2, [pc, #20]	; (8007578 <prvInitialiseTaskLists+0x68>)
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20026d14 	.word	0x20026d14
 8007574:	20027174 	.word	0x20027174
 8007578:	20027188 	.word	0x20027188
 800757c:	200271a4 	.word	0x200271a4
 8007580:	200271b8 	.word	0x200271b8
 8007584:	200271d0 	.word	0x200271d0
 8007588:	2002719c 	.word	0x2002719c
 800758c:	200271a0 	.word	0x200271a0

08007590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007596:	e019      	b.n	80075cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007598:	f000 feac 	bl	80082f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <prvCheckTasksWaitingTermination+0x50>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fb0f 	bl	8005bcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075c2:	f000 fec7 	bl	8008354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f810 	bl	80075ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e1      	bne.n	8007598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200271b8 	.word	0x200271b8
 80075e4:	200271e4 	.word	0x200271e4
 80075e8:	200271cc 	.word	0x200271cc

080075ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d108      	bne.n	8007610 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	4618      	mov	r0, r3
 8007604:	f001 f864 	bl	80086d0 <vPortFree>
				vPortFree( pxTCB );
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f861 	bl	80086d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800760e:	e018      	b.n	8007642 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007616:	2b01      	cmp	r3, #1
 8007618:	d103      	bne.n	8007622 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f858 	bl	80086d0 <vPortFree>
	}
 8007620:	e00f      	b.n	8007642 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007628:	2b02      	cmp	r3, #2
 800762a:	d00a      	beq.n	8007642 <prvDeleteTCB+0x56>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60fb      	str	r3, [r7, #12]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <prvDeleteTCB+0x54>
	}
 8007642:	bf00      	nop
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007652:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <prvResetNextTaskUnblockTime+0x38>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <prvResetNextTaskUnblockTime+0x3c>)
 800765e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007664:	e008      	b.n	8007678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <prvResetNextTaskUnblockTime+0x38>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4a04      	ldr	r2, [pc, #16]	; (8007688 <prvResetNextTaskUnblockTime+0x3c>)
 8007676:	6013      	str	r3, [r2, #0]
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	2002719c 	.word	0x2002719c
 8007688:	20027204 	.word	0x20027204

0800768c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007692:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <xTaskGetSchedulerState+0x34>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800769a:	2301      	movs	r3, #1
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	e008      	b.n	80076b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <xTaskGetSchedulerState+0x38>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076a8:	2302      	movs	r3, #2
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	e001      	b.n	80076b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076b2:	687b      	ldr	r3, [r7, #4]
	}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	200271f0 	.word	0x200271f0
 80076c4:	2002720c 	.word	0x2002720c

080076c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d056      	beq.n	800778c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076de:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <xTaskPriorityDisinherit+0xd0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d00a      	beq.n	80076fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	60fb      	str	r3, [r7, #12]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007720:	1e5a      	subs	r2, r3, #1
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	429a      	cmp	r2, r3
 8007730:	d02c      	beq.n	800778c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007736:	2b00      	cmp	r3, #0
 8007738:	d128      	bne.n	800778c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3304      	adds	r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fa44 	bl	8005bcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <xTaskPriorityDisinherit+0xd4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <xTaskPriorityDisinherit+0xa4>
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	4a0c      	ldr	r2, [pc, #48]	; (800779c <xTaskPriorityDisinherit+0xd4>)
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <xTaskPriorityDisinherit+0xd8>)
 800777a:	441a      	add	r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f7fe f9c5 	bl	8005b12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800778c:	697b      	ldr	r3, [r7, #20]
	}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20026d10 	.word	0x20026d10
 800779c:	200271ec 	.word	0x200271ec
 80077a0:	20026d14 	.word	0x20026d14

080077a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077ae:	4b21      	ldr	r3, [pc, #132]	; (8007834 <prvAddCurrentTaskToDelayedList+0x90>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b4:	4b20      	ldr	r3, [pc, #128]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fa06 	bl	8005bcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c6:	d10a      	bne.n	80077de <prvAddCurrentTaskToDelayedList+0x3a>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d007      	beq.n	80077de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ce:	4b1a      	ldr	r3, [pc, #104]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4819      	ldr	r0, [pc, #100]	; (800783c <prvAddCurrentTaskToDelayedList+0x98>)
 80077d8:	f7fe f99b 	bl	8005b12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077dc:	e026      	b.n	800782c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4413      	add	r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d209      	bcs.n	800780a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f7fe f9a9 	bl	8005b5a <vListInsert>
}
 8007808:	e010      	b.n	800782c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800780a:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3304      	adds	r3, #4
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f7fe f99f 	bl	8005b5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	429a      	cmp	r2, r3
 8007824:	d202      	bcs.n	800782c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007826:	4a08      	ldr	r2, [pc, #32]	; (8007848 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6013      	str	r3, [r2, #0]
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	200271e8 	.word	0x200271e8
 8007838:	20026d10 	.word	0x20026d10
 800783c:	200271d0 	.word	0x200271d0
 8007840:	200271a0 	.word	0x200271a0
 8007844:	2002719c 	.word	0x2002719c
 8007848:	20027204 	.word	0x20027204

0800784c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007856:	f000 fba1 	bl	8007f9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800785a:	4b1c      	ldr	r3, [pc, #112]	; (80078cc <xTimerCreateTimerTask+0x80>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d021      	beq.n	80078a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800786a:	1d3a      	adds	r2, r7, #4
 800786c:	f107 0108 	add.w	r1, r7, #8
 8007870:	f107 030c 	add.w	r3, r7, #12
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd ffab 	bl	80057d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	9202      	str	r2, [sp, #8]
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	2302      	movs	r3, #2
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	2300      	movs	r3, #0
 800788a:	460a      	mov	r2, r1
 800788c:	4910      	ldr	r1, [pc, #64]	; (80078d0 <xTimerCreateTimerTask+0x84>)
 800788e:	4811      	ldr	r0, [pc, #68]	; (80078d4 <xTimerCreateTimerTask+0x88>)
 8007890:	f7ff f87c 	bl	800698c <xTaskCreateStatic>
 8007894:	4603      	mov	r3, r0
 8007896:	4a10      	ldr	r2, [pc, #64]	; (80078d8 <xTimerCreateTimerTask+0x8c>)
 8007898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800789a:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <xTimerCreateTimerTask+0x8c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078a2:	2301      	movs	r3, #1
 80078a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	613b      	str	r3, [r7, #16]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078c2:	697b      	ldr	r3, [r7, #20]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20027240 	.word	0x20027240
 80078d0:	08008c24 	.word	0x08008c24
 80078d4:	08007b45 	.word	0x08007b45
 80078d8:	20027244 	.word	0x20027244

080078dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80078ea:	202c      	movs	r0, #44	; 0x2c
 80078ec:	f000 fe24 	bl	8008538 <pvPortMalloc>
 80078f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00d      	beq.n	8007914 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f843 	bl	800799a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007914:	697b      	ldr	r3, [r7, #20]
	}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800791e:	b580      	push	{r7, lr}
 8007920:	b08a      	sub	sp, #40	; 0x28
 8007922:	af02      	add	r7, sp, #8
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800792c:	232c      	movs	r3, #44	; 0x2c
 800792e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b2c      	cmp	r3, #44	; 0x2c
 8007934:	d00a      	beq.n	800794c <xTimerCreateStatic+0x2e>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	61bb      	str	r3, [r7, #24]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800794c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <xTimerCreateStatic+0x4c>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	617b      	str	r3, [r7, #20]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00d      	beq.n	8007990 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 f805 	bl	800799a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007990:	69fb      	ldr	r3, [r7, #28]
	}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	617b      	str	r3, [r7, #20]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01e      	beq.n	8007a08 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80079ca:	f000 fae7 	bl	8007f9c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe f884 	bl	8005af8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079fc:	f043 0304 	orr.w	r3, r3, #4
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007a08:	bf00      	nop
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	; 0x28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	623b      	str	r3, [r7, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a3e:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02a      	beq.n	8007a9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b05      	cmp	r3, #5
 8007a56:	dc18      	bgt.n	8007a8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a58:	f7ff fe18 	bl	800768c <xTaskGetSchedulerState>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d109      	bne.n	8007a76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a62:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	f107 0110 	add.w	r1, r7, #16
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	f7fe facb 	bl	8006008 <xQueueGenericSend>
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24
 8007a74:	e012      	b.n	8007a9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a76:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f107 0110 	add.w	r1, r7, #16
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2200      	movs	r2, #0
 8007a82:	f7fe fac1 	bl	8006008 <xQueueGenericSend>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24
 8007a88:	e008      	b.n	8007a9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <xTimerGenericCommand+0x98>)
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f107 0110 	add.w	r1, r7, #16
 8007a92:	2300      	movs	r3, #0
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	f7fe fbb5 	bl	8006204 <xQueueGenericSendFromISR>
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3728      	adds	r7, #40	; 0x28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20027240 	.word	0x20027240

08007aac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab6:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <prvProcessExpiredTimer+0x94>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe f881 	bl	8005bcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d022      	beq.n	8007b1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	699a      	ldr	r2, [r3, #24]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	18d1      	adds	r1, r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	6978      	ldr	r0, [r7, #20]
 8007ae6:	f000 f8d1 	bl	8007c8c <prvInsertTimerInActiveList>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01f      	beq.n	8007b30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	2100      	movs	r1, #0
 8007afa:	6978      	ldr	r0, [r7, #20]
 8007afc:	f7ff ff88 	bl	8007a10 <xTimerGenericCommand>
 8007b00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d113      	bne.n	8007b30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	6978      	ldr	r0, [r7, #20]
 8007b36:	4798      	blx	r3
}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20027238 	.word	0x20027238

08007b44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f857 	bl	8007c04 <prvGetNextExpireTime>
 8007b56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f803 	bl	8007b68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b62:	f000 f8d5 	bl	8007d10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b66:	e7f1      	b.n	8007b4c <prvTimerTask+0x8>

08007b68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b72:	f7ff f947 	bl	8006e04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 f866 	bl	8007c4c <prvSampleTimeNow>
 8007b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d130      	bne.n	8007bea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <prvProcessTimerOrBlockTask+0x3c>
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d806      	bhi.n	8007ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b96:	f7ff f943 	bl	8006e20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff ff85 	bl	8007aac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ba2:	e024      	b.n	8007bee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d008      	beq.n	8007bbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <prvProcessTimerOrBlockTask+0x90>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <prvProcessTimerOrBlockTask+0x50>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <prvProcessTimerOrBlockTask+0x52>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bbc:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <prvProcessTimerOrBlockTask+0x94>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f7fe feab 	bl	8006924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bce:	f7ff f927 	bl	8006e20 <xTaskResumeAll>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bd8:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <prvProcessTimerOrBlockTask+0x98>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
}
 8007be8:	e001      	b.n	8007bee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bea:	f7ff f919 	bl	8006e20 <xTaskResumeAll>
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	2002723c 	.word	0x2002723c
 8007bfc:	20027240 	.word	0x20027240
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c0c:	4b0e      	ldr	r3, [pc, #56]	; (8007c48 <prvGetNextExpireTime+0x44>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <prvGetNextExpireTime+0x16>
 8007c16:	2201      	movs	r2, #1
 8007c18:	e000      	b.n	8007c1c <prvGetNextExpireTime+0x18>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d105      	bne.n	8007c34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <prvGetNextExpireTime+0x44>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	e001      	b.n	8007c38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c38:	68fb      	ldr	r3, [r7, #12]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20027238 	.word	0x20027238

08007c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c54:	f7ff f982 	bl	8006f5c <xTaskGetTickCount>
 8007c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <prvSampleTimeNow+0x3c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d205      	bcs.n	8007c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c64:	f000 f936 	bl	8007ed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c76:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <prvSampleTimeNow+0x3c>)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20027248 	.word	0x20027248

08007c8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d812      	bhi.n	8007cd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e01b      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <prvInsertTimerInActiveList+0x7c>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fd ff42 	bl	8005b5a <vListInsert>
 8007cd6:	e012      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d206      	bcs.n	8007cee <prvInsertTimerInActiveList+0x62>
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d302      	bcc.n	8007cee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e007      	b.n	8007cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <prvInsertTimerInActiveList+0x80>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fd ff2e 	bl	8005b5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cfe:	697b      	ldr	r3, [r7, #20]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	2002723c 	.word	0x2002723c
 8007d0c:	20027238 	.word	0x20027238

08007d10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d16:	e0ca      	b.n	8007eae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da18      	bge.n	8007d50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	3304      	adds	r3, #4
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	61fb      	str	r3, [r7, #28]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d46:	6850      	ldr	r0, [r2, #4]
 8007d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4a:	6892      	ldr	r2, [r2, #8]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f2c0 80ab 	blt.w	8007eae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	3304      	adds	r3, #4
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd ff2f 	bl	8005bcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d6e:	463b      	mov	r3, r7
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff ff6b 	bl	8007c4c <prvSampleTimeNow>
 8007d76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	f200 8096 	bhi.w	8007eac <prvProcessReceivedCommands+0x19c>
 8007d80:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <prvProcessReceivedCommands+0x78>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007db1 	.word	0x08007db1
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007e25 	.word	0x08007e25
 8007d98:	08007e39 	.word	0x08007e39
 8007d9c:	08007e83 	.word	0x08007e83
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	08007db1 	.word	0x08007db1
 8007da8:	08007e25 	.word	0x08007e25
 8007dac:	08007e39 	.word	0x08007e39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	18d1      	adds	r1, r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd0:	f7ff ff5c 	bl	8007c8c <prvInsertTimerInActiveList>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d069      	beq.n	8007eae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d05e      	beq.n	8007eae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	441a      	add	r2, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e02:	f7ff fe05 	bl	8007a10 <xTimerGenericCommand>
 8007e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d14f      	bne.n	8007eae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61bb      	str	r3, [r7, #24]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e36:	e03a      	b.n	8007eae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e3e:	f043 0301 	orr.w	r3, r3, #1
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	617b      	str	r3, [r7, #20]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	18d1      	adds	r1, r2, r3
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7c:	f7ff ff06 	bl	8007c8c <prvInsertTimerInActiveList>
					break;
 8007e80:	e015      	b.n	8007eae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e92:	f000 fc1d 	bl	80086d0 <vPortFree>
 8007e96:	e00a      	b.n	8007eae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e9e:	f023 0301 	bic.w	r3, r3, #1
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007eaa:	e000      	b.n	8007eae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007eac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eae:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <prvProcessReceivedCommands+0x1c0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	1d39      	adds	r1, r7, #4
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe facc 	bl	8006454 <xQueueReceive>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f47f af2a 	bne.w	8007d18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	3730      	adds	r7, #48	; 0x30
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20027240 	.word	0x20027240

08007ed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eda:	e048      	b.n	8007f6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007edc:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee6:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fd fe69 	bl	8005bcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02e      	beq.n	8007f6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d90e      	bls.n	8007f40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f2e:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4619      	mov	r1, r3
 8007f38:	4610      	mov	r0, r2
 8007f3a:	f7fd fe0e 	bl	8005b5a <vListInsert>
 8007f3e:	e016      	b.n	8007f6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f40:	2300      	movs	r3, #0
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fd60 	bl	8007a10 <xTimerGenericCommand>
 8007f50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	603b      	str	r3, [r7, #0]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f6e:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1b1      	bne.n	8007edc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f78:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <prvSwitchTimerLists+0xc4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a04      	ldr	r2, [pc, #16]	; (8007f94 <prvSwitchTimerLists+0xc0>)
 8007f84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f86:	4a04      	ldr	r2, [pc, #16]	; (8007f98 <prvSwitchTimerLists+0xc4>)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	6013      	str	r3, [r2, #0]
}
 8007f8c:	bf00      	nop
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20027238 	.word	0x20027238
 8007f98:	2002723c 	.word	0x2002723c

08007f9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fa2:	f000 f9a7 	bl	80082f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fa6:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d120      	bne.n	8007ff0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fae:	4814      	ldr	r0, [pc, #80]	; (8008000 <prvCheckForValidListAndQueue+0x64>)
 8007fb0:	f7fd fd82 	bl	8005ab8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fb4:	4813      	ldr	r0, [pc, #76]	; (8008004 <prvCheckForValidListAndQueue+0x68>)
 8007fb6:	f7fd fd7f 	bl	8005ab8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fba:	4b13      	ldr	r3, [pc, #76]	; (8008008 <prvCheckForValidListAndQueue+0x6c>)
 8007fbc:	4a10      	ldr	r2, [pc, #64]	; (8008000 <prvCheckForValidListAndQueue+0x64>)
 8007fbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fc0:	4b12      	ldr	r3, [pc, #72]	; (800800c <prvCheckForValidListAndQueue+0x70>)
 8007fc2:	4a10      	ldr	r2, [pc, #64]	; (8008004 <prvCheckForValidListAndQueue+0x68>)
 8007fc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <prvCheckForValidListAndQueue+0x74>)
 8007fcc:	4a11      	ldr	r2, [pc, #68]	; (8008014 <prvCheckForValidListAndQueue+0x78>)
 8007fce:	2110      	movs	r1, #16
 8007fd0:	200a      	movs	r0, #10
 8007fd2:	f7fd fe8d 	bl	8005cf0 <xQueueGenericCreateStatic>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4a08      	ldr	r2, [pc, #32]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fdc:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <prvCheckForValidListAndQueue+0x60>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	490b      	ldr	r1, [pc, #44]	; (8008018 <prvCheckForValidListAndQueue+0x7c>)
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fc46 	bl	800687c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ff0:	f000 f9b0 	bl	8008354 <vPortExitCritical>
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20027240 	.word	0x20027240
 8008000:	20027210 	.word	0x20027210
 8008004:	20027224 	.word	0x20027224
 8008008:	20027238 	.word	0x20027238
 800800c:	2002723c 	.word	0x2002723c
 8008010:	200272ec 	.word	0x200272ec
 8008014:	2002724c 	.word	0x2002724c
 8008018:	08008c2c 	.word	0x08008c2c

0800801c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <pvTimerGetTimerID+0x28>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	60fb      	str	r3, [r7, #12]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008044:	f000 f956 	bl	80082f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800804e:	f000 f981 	bl	8008354 <vPortExitCritical>

	return pvReturn;
 8008052:	693b      	ldr	r3, [r7, #16]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08a      	sub	sp, #40	; 0x28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800806a:	f06f 0301 	mvn.w	r3, #1
 800806e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <xTimerPendFunctionCallFromISR+0x3c>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	f107 0114 	add.w	r1, r7, #20
 8008084:	2300      	movs	r3, #0
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	f7fe f8bc 	bl	8006204 <xQueueGenericSendFromISR>
 800808c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008090:	4618      	mov	r0, r3
 8008092:	3728      	adds	r7, #40	; 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20027240 	.word	0x20027240

0800809c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3b04      	subs	r3, #4
 80080ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3b04      	subs	r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f023 0201 	bic.w	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3b04      	subs	r3, #4
 80080ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080cc:	4a0c      	ldr	r2, [pc, #48]	; (8008100 <pxPortInitialiseStack+0x64>)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3b14      	subs	r3, #20
 80080d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3b04      	subs	r3, #4
 80080e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f06f 0202 	mvn.w	r2, #2
 80080ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3b20      	subs	r3, #32
 80080f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080f2:	68fb      	ldr	r3, [r7, #12]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	08008105 	.word	0x08008105

08008104 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800810e:	4b12      	ldr	r3, [pc, #72]	; (8008158 <prvTaskExitError+0x54>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008116:	d00a      	beq.n	800812e <prvTaskExitError+0x2a>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	60fb      	str	r3, [r7, #12]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <prvTaskExitError+0x28>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	60bb      	str	r3, [r7, #8]
}
 8008140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008142:	bf00      	nop
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0fc      	beq.n	8008144 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	20000250 	.word	0x20000250
 800815c:	00000000 	.word	0x00000000

08008160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <pxCurrentTCBConst2>)
 8008162:	6819      	ldr	r1, [r3, #0]
 8008164:	6808      	ldr	r0, [r1, #0]
 8008166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	f380 8809 	msr	PSP, r0
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f380 8811 	msr	BASEPRI, r0
 800817a:	4770      	bx	lr
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst2>:
 8008180:	20026d10 	.word	0x20026d10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008188:	4808      	ldr	r0, [pc, #32]	; (80081ac <prvPortStartFirstTask+0x24>)
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	6800      	ldr	r0, [r0, #0]
 800818e:	f380 8808 	msr	MSP, r0
 8008192:	f04f 0000 	mov.w	r0, #0
 8008196:	f380 8814 	msr	CONTROL, r0
 800819a:	b662      	cpsie	i
 800819c:	b661      	cpsie	f
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	df00      	svc	0
 80081a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081aa:	bf00      	nop
 80081ac:	e000ed08 	.word	0xe000ed08

080081b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081b6:	4b46      	ldr	r3, [pc, #280]	; (80082d0 <xPortStartScheduler+0x120>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a46      	ldr	r2, [pc, #280]	; (80082d4 <xPortStartScheduler+0x124>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10a      	bne.n	80081d6 <xPortStartScheduler+0x26>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	613b      	str	r3, [r7, #16]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081d6:	4b3e      	ldr	r3, [pc, #248]	; (80082d0 <xPortStartScheduler+0x120>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a3f      	ldr	r2, [pc, #252]	; (80082d8 <xPortStartScheduler+0x128>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10a      	bne.n	80081f6 <xPortStartScheduler+0x46>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081f6:	4b39      	ldr	r3, [pc, #228]	; (80082dc <xPortStartScheduler+0x12c>)
 80081f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	22ff      	movs	r2, #255	; 0xff
 8008206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008218:	b2da      	uxtb	r2, r3
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <xPortStartScheduler+0x130>)
 800821c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800821e:	4b31      	ldr	r3, [pc, #196]	; (80082e4 <xPortStartScheduler+0x134>)
 8008220:	2207      	movs	r2, #7
 8008222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008224:	e009      	b.n	800823a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008226:	4b2f      	ldr	r3, [pc, #188]	; (80082e4 <xPortStartScheduler+0x134>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3b01      	subs	r3, #1
 800822c:	4a2d      	ldr	r2, [pc, #180]	; (80082e4 <xPortStartScheduler+0x134>)
 800822e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	b2db      	uxtb	r3, r3
 8008238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008242:	2b80      	cmp	r3, #128	; 0x80
 8008244:	d0ef      	beq.n	8008226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008246:	4b27      	ldr	r3, [pc, #156]	; (80082e4 <xPortStartScheduler+0x134>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f1c3 0307 	rsb	r3, r3, #7
 800824e:	2b04      	cmp	r3, #4
 8008250:	d00a      	beq.n	8008268 <xPortStartScheduler+0xb8>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60bb      	str	r3, [r7, #8]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008268:	4b1e      	ldr	r3, [pc, #120]	; (80082e4 <xPortStartScheduler+0x134>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <xPortStartScheduler+0x134>)
 8008270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008272:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <xPortStartScheduler+0x134>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800827a:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <xPortStartScheduler+0x134>)
 800827c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008286:	4b18      	ldr	r3, [pc, #96]	; (80082e8 <xPortStartScheduler+0x138>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a17      	ldr	r2, [pc, #92]	; (80082e8 <xPortStartScheduler+0x138>)
 800828c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008292:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <xPortStartScheduler+0x138>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a14      	ldr	r2, [pc, #80]	; (80082e8 <xPortStartScheduler+0x138>)
 8008298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800829c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800829e:	f000 f8dd 	bl	800845c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <xPortStartScheduler+0x13c>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082a8:	f000 f8fc 	bl	80084a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <xPortStartScheduler+0x140>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <xPortStartScheduler+0x140>)
 80082b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082b8:	f7ff ff66 	bl	8008188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082bc:	f7fe ff18 	bl	80070f0 <vTaskSwitchContext>
	prvTaskExitError();
 80082c0:	f7ff ff20 	bl	8008104 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	e000ed00 	.word	0xe000ed00
 80082d4:	410fc271 	.word	0x410fc271
 80082d8:	410fc270 	.word	0x410fc270
 80082dc:	e000e400 	.word	0xe000e400
 80082e0:	2002733c 	.word	0x2002733c
 80082e4:	20027340 	.word	0x20027340
 80082e8:	e000ed20 	.word	0xe000ed20
 80082ec:	20000250 	.word	0x20000250
 80082f0:	e000ef34 	.word	0xe000ef34

080082f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	607b      	str	r3, [r7, #4]
}
 800830c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <vPortEnterCritical+0x58>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	4a0d      	ldr	r2, [pc, #52]	; (800834c <vPortEnterCritical+0x58>)
 8008316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008318:	4b0c      	ldr	r3, [pc, #48]	; (800834c <vPortEnterCritical+0x58>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d10f      	bne.n	8008340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <vPortEnterCritical+0x5c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <vPortEnterCritical+0x4c>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	603b      	str	r3, [r7, #0]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <vPortEnterCritical+0x4a>
	}
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	20000250 	.word	0x20000250
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800835a:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <vPortExitCritical+0x50>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <vPortExitCritical+0x24>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	607b      	str	r3, [r7, #4]
}
 8008374:	bf00      	nop
 8008376:	e7fe      	b.n	8008376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008378:	4b0a      	ldr	r3, [pc, #40]	; (80083a4 <vPortExitCritical+0x50>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3b01      	subs	r3, #1
 800837e:	4a09      	ldr	r2, [pc, #36]	; (80083a4 <vPortExitCritical+0x50>)
 8008380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <vPortExitCritical+0x50>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d105      	bne.n	8008396 <vPortExitCritical+0x42>
 800838a:	2300      	movs	r3, #0
 800838c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	f383 8811 	msr	BASEPRI, r3
}
 8008394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20000250 	.word	0x20000250
	...

080083b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083b0:	f3ef 8009 	mrs	r0, PSP
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4b15      	ldr	r3, [pc, #84]	; (8008410 <pxCurrentTCBConst>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	f01e 0f10 	tst.w	lr, #16
 80083c0:	bf08      	it	eq
 80083c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	6010      	str	r0, [r2, #0]
 80083cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083d4:	f380 8811 	msr	BASEPRI, r0
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f7fe fe86 	bl	80070f0 <vTaskSwitchContext>
 80083e4:	f04f 0000 	mov.w	r0, #0
 80083e8:	f380 8811 	msr	BASEPRI, r0
 80083ec:	bc09      	pop	{r0, r3}
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	6808      	ldr	r0, [r1, #0]
 80083f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f6:	f01e 0f10 	tst.w	lr, #16
 80083fa:	bf08      	it	eq
 80083fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008400:	f380 8809 	msr	PSP, r0
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	f3af 8000 	nop.w

08008410 <pxCurrentTCBConst>:
 8008410:	20026d10 	.word	0x20026d10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop

08008418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008432:	f7fe fda3 	bl	8006f7c <xTaskIncrementTick>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <xPortSysTickHandler+0x40>)
 800843e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f383 8811 	msr	BASEPRI, r3
}
 800844e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <vPortSetupTimerInterrupt+0x34>)
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008466:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <vPortSetupTimerInterrupt+0x38>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <vPortSetupTimerInterrupt+0x3c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a0a      	ldr	r2, [pc, #40]	; (800849c <vPortSetupTimerInterrupt+0x40>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	099b      	lsrs	r3, r3, #6
 8008478:	4a09      	ldr	r2, [pc, #36]	; (80084a0 <vPortSetupTimerInterrupt+0x44>)
 800847a:	3b01      	subs	r3, #1
 800847c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <vPortSetupTimerInterrupt+0x34>)
 8008480:	2207      	movs	r2, #7
 8008482:	601a      	str	r2, [r3, #0]
}
 8008484:	bf00      	nop
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	e000e010 	.word	0xe000e010
 8008494:	e000e018 	.word	0xe000e018
 8008498:	20000244 	.word	0x20000244
 800849c:	10624dd3 	.word	0x10624dd3
 80084a0:	e000e014 	.word	0xe000e014

080084a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084b4 <vPortEnableVFP+0x10>
 80084a8:	6801      	ldr	r1, [r0, #0]
 80084aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084ae:	6001      	str	r1, [r0, #0]
 80084b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084b2:	bf00      	nop
 80084b4:	e000ed88 	.word	0xe000ed88

080084b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084be:	f3ef 8305 	mrs	r3, IPSR
 80084c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b0f      	cmp	r3, #15
 80084c8:	d914      	bls.n	80084f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084ca:	4a17      	ldr	r2, [pc, #92]	; (8008528 <vPortValidateInterruptPriority+0x70>)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084d4:	4b15      	ldr	r3, [pc, #84]	; (800852c <vPortValidateInterruptPriority+0x74>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	7afa      	ldrb	r2, [r7, #11]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d20a      	bcs.n	80084f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084f4:	4b0e      	ldr	r3, [pc, #56]	; (8008530 <vPortValidateInterruptPriority+0x78>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <vPortValidateInterruptPriority+0x7c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d90a      	bls.n	800851a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	603b      	str	r3, [r7, #0]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <vPortValidateInterruptPriority+0x60>
	}
 800851a:	bf00      	nop
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	e000e3f0 	.word	0xe000e3f0
 800852c:	2002733c 	.word	0x2002733c
 8008530:	e000ed0c 	.word	0xe000ed0c
 8008534:	20027340 	.word	0x20027340

08008538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	; 0x28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008544:	f7fe fc5e 	bl	8006e04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008548:	4b5b      	ldr	r3, [pc, #364]	; (80086b8 <pvPortMalloc+0x180>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008550:	f000 f920 	bl	8008794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008554:	4b59      	ldr	r3, [pc, #356]	; (80086bc <pvPortMalloc+0x184>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4013      	ands	r3, r2
 800855c:	2b00      	cmp	r3, #0
 800855e:	f040 8093 	bne.w	8008688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01d      	beq.n	80085a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008568:	2208      	movs	r2, #8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	2b00      	cmp	r3, #0
 8008578:	d014      	beq.n	80085a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f023 0307 	bic.w	r3, r3, #7
 8008580:	3308      	adds	r3, #8
 8008582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <pvPortMalloc+0x6c>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	617b      	str	r3, [r7, #20]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d06e      	beq.n	8008688 <pvPortMalloc+0x150>
 80085aa:	4b45      	ldr	r3, [pc, #276]	; (80086c0 <pvPortMalloc+0x188>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d869      	bhi.n	8008688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085b4:	4b43      	ldr	r3, [pc, #268]	; (80086c4 <pvPortMalloc+0x18c>)
 80085b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085b8:	4b42      	ldr	r3, [pc, #264]	; (80086c4 <pvPortMalloc+0x18c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085be:	e004      	b.n	80085ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d903      	bls.n	80085dc <pvPortMalloc+0xa4>
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1f1      	bne.n	80085c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085dc:	4b36      	ldr	r3, [pc, #216]	; (80086b8 <pvPortMalloc+0x180>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d050      	beq.n	8008688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2208      	movs	r2, #8
 80085ec:	4413      	add	r3, r2
 80085ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	2308      	movs	r3, #8
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	429a      	cmp	r2, r3
 8008606:	d91f      	bls.n	8008648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4413      	add	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <pvPortMalloc+0xf8>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	613b      	str	r3, [r7, #16]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008642:	69b8      	ldr	r0, [r7, #24]
 8008644:	f000 f908 	bl	8008858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008648:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <pvPortMalloc+0x188>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	4a1b      	ldr	r2, [pc, #108]	; (80086c0 <pvPortMalloc+0x188>)
 8008654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008656:	4b1a      	ldr	r3, [pc, #104]	; (80086c0 <pvPortMalloc+0x188>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <pvPortMalloc+0x190>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d203      	bcs.n	800866a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008662:	4b17      	ldr	r3, [pc, #92]	; (80086c0 <pvPortMalloc+0x188>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <pvPortMalloc+0x190>)
 8008668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <pvPortMalloc+0x184>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	431a      	orrs	r2, r3
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <pvPortMalloc+0x194>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3301      	adds	r3, #1
 8008684:	4a11      	ldr	r2, [pc, #68]	; (80086cc <pvPortMalloc+0x194>)
 8008686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008688:	f7fe fbca 	bl	8006e20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <pvPortMalloc+0x174>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	60fb      	str	r3, [r7, #12]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <pvPortMalloc+0x172>
	return pvReturn;
 80086ac:	69fb      	ldr	r3, [r7, #28]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3728      	adds	r7, #40	; 0x28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	2002af4c 	.word	0x2002af4c
 80086bc:	2002af60 	.word	0x2002af60
 80086c0:	2002af50 	.word	0x2002af50
 80086c4:	2002af44 	.word	0x2002af44
 80086c8:	2002af54 	.word	0x2002af54
 80086cc:	2002af58 	.word	0x2002af58

080086d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d04d      	beq.n	800877e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086e2:	2308      	movs	r3, #8
 80086e4:	425b      	negs	r3, r3
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4413      	add	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	4b24      	ldr	r3, [pc, #144]	; (8008788 <vPortFree+0xb8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <vPortFree+0x44>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	60fb      	str	r3, [r7, #12]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <vPortFree+0x62>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60bb      	str	r3, [r7, #8]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <vPortFree+0xb8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01e      	beq.n	800877e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d11a      	bne.n	800877e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <vPortFree+0xb8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	43db      	mvns	r3, r3
 8008752:	401a      	ands	r2, r3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008758:	f7fe fb54 	bl	8006e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <vPortFree+0xbc>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4413      	add	r3, r2
 8008766:	4a09      	ldr	r2, [pc, #36]	; (800878c <vPortFree+0xbc>)
 8008768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800876a:	6938      	ldr	r0, [r7, #16]
 800876c:	f000 f874 	bl	8008858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <vPortFree+0xc0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	4a06      	ldr	r2, [pc, #24]	; (8008790 <vPortFree+0xc0>)
 8008778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800877a:	f7fe fb51 	bl	8006e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800877e:	bf00      	nop
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	2002af60 	.word	0x2002af60
 800878c:	2002af50 	.word	0x2002af50
 8008790:	2002af5c 	.word	0x2002af5c

08008794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800879a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800879e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <prvHeapInit+0xac>)
 80087a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3307      	adds	r3, #7
 80087b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	4a1f      	ldr	r2, [pc, #124]	; (8008840 <prvHeapInit+0xac>)
 80087c4:	4413      	add	r3, r2
 80087c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087cc:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <prvHeapInit+0xb0>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <prvHeapInit+0xb0>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087e0:	2208      	movs	r2, #8
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0307 	bic.w	r3, r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a15      	ldr	r2, [pc, #84]	; (8008848 <prvHeapInit+0xb4>)
 80087f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <prvHeapInit+0xb4>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2200      	movs	r2, #0
 80087fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <prvHeapInit+0xb4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	1ad2      	subs	r2, r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008814:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvHeapInit+0xb4>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	4a0a      	ldr	r2, [pc, #40]	; (800884c <prvHeapInit+0xb8>)
 8008822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4a09      	ldr	r2, [pc, #36]	; (8008850 <prvHeapInit+0xbc>)
 800882a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <prvHeapInit+0xc0>)
 800882e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008832:	601a      	str	r2, [r3, #0]
}
 8008834:	bf00      	nop
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	20027344 	.word	0x20027344
 8008844:	2002af44 	.word	0x2002af44
 8008848:	2002af4c 	.word	0x2002af4c
 800884c:	2002af54 	.word	0x2002af54
 8008850:	2002af50 	.word	0x2002af50
 8008854:	2002af60 	.word	0x2002af60

08008858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008860:	4b28      	ldr	r3, [pc, #160]	; (8008904 <prvInsertBlockIntoFreeList+0xac>)
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	e002      	b.n	800886c <prvInsertBlockIntoFreeList+0x14>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	429a      	cmp	r2, r3
 8008874:	d8f7      	bhi.n	8008866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4413      	add	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d108      	bne.n	800889a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	441a      	add	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d118      	bne.n	80088e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <prvInsertBlockIntoFreeList+0xb0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d00d      	beq.n	80088d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	441a      	add	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e008      	b.n	80088e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <prvInsertBlockIntoFreeList+0xb0>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	e003      	b.n	80088e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d002      	beq.n	80088f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2002af44 	.word	0x2002af44
 8008908:	2002af4c 	.word	0x2002af4c

0800890c <memset>:
 800890c:	4402      	add	r2, r0
 800890e:	4603      	mov	r3, r0
 8008910:	4293      	cmp	r3, r2
 8008912:	d100      	bne.n	8008916 <memset+0xa>
 8008914:	4770      	bx	lr
 8008916:	f803 1b01 	strb.w	r1, [r3], #1
 800891a:	e7f9      	b.n	8008910 <memset+0x4>

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	; (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	200002a0 	.word	0x200002a0

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4d0d      	ldr	r5, [pc, #52]	; (8008960 <__libc_init_array+0x38>)
 800892c:	4c0d      	ldr	r4, [pc, #52]	; (8008964 <__libc_init_array+0x3c>)
 800892e:	1b64      	subs	r4, r4, r5
 8008930:	10a4      	asrs	r4, r4, #2
 8008932:	2600      	movs	r6, #0
 8008934:	42a6      	cmp	r6, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	4d0b      	ldr	r5, [pc, #44]	; (8008968 <__libc_init_array+0x40>)
 800893a:	4c0c      	ldr	r4, [pc, #48]	; (800896c <__libc_init_array+0x44>)
 800893c:	f000 f92c 	bl	8008b98 <_init>
 8008940:	1b64      	subs	r4, r4, r5
 8008942:	10a4      	asrs	r4, r4, #2
 8008944:	2600      	movs	r6, #0
 8008946:	42a6      	cmp	r6, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008950:	4798      	blx	r3
 8008952:	3601      	adds	r6, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f855 3b04 	ldr.w	r3, [r5], #4
 800895a:	4798      	blx	r3
 800895c:	3601      	adds	r6, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	08009ef4 	.word	0x08009ef4
 8008964:	08009ef4 	.word	0x08009ef4
 8008968:	08009ef4 	.word	0x08009ef4
 800896c:	08009ef8 	.word	0x08009ef8

08008970 <memcpy>:
 8008970:	440a      	add	r2, r1
 8008972:	4291      	cmp	r1, r2
 8008974:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008978:	d100      	bne.n	800897c <memcpy+0xc>
 800897a:	4770      	bx	lr
 800897c:	b510      	push	{r4, lr}
 800897e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008986:	4291      	cmp	r1, r2
 8008988:	d1f9      	bne.n	800897e <memcpy+0xe>
 800898a:	bd10      	pop	{r4, pc}

0800898c <sqrt>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	ed2d 8b02 	vpush	{d8}
 8008992:	ec55 4b10 	vmov	r4, r5, d0
 8008996:	f000 f825 	bl	80089e4 <__ieee754_sqrt>
 800899a:	4622      	mov	r2, r4
 800899c:	462b      	mov	r3, r5
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	eeb0 8a40 	vmov.f32	s16, s0
 80089a6:	eef0 8a60 	vmov.f32	s17, s1
 80089aa:	f7f8 f877 	bl	8000a9c <__aeabi_dcmpun>
 80089ae:	b990      	cbnz	r0, 80089d6 <sqrt+0x4a>
 80089b0:	2200      	movs	r2, #0
 80089b2:	2300      	movs	r3, #0
 80089b4:	4620      	mov	r0, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	f7f8 f848 	bl	8000a4c <__aeabi_dcmplt>
 80089bc:	b158      	cbz	r0, 80089d6 <sqrt+0x4a>
 80089be:	f7ff ffad 	bl	800891c <__errno>
 80089c2:	2321      	movs	r3, #33	; 0x21
 80089c4:	6003      	str	r3, [r0, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	2300      	movs	r3, #0
 80089ca:	4610      	mov	r0, r2
 80089cc:	4619      	mov	r1, r3
 80089ce:	f7f7 fef5 	bl	80007bc <__aeabi_ddiv>
 80089d2:	ec41 0b18 	vmov	d8, r0, r1
 80089d6:	eeb0 0a48 	vmov.f32	s0, s16
 80089da:	eef0 0a68 	vmov.f32	s1, s17
 80089de:	ecbd 8b02 	vpop	{d8}
 80089e2:	bd38      	pop	{r3, r4, r5, pc}

080089e4 <__ieee754_sqrt>:
 80089e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	ec55 4b10 	vmov	r4, r5, d0
 80089ec:	4e67      	ldr	r6, [pc, #412]	; (8008b8c <__ieee754_sqrt+0x1a8>)
 80089ee:	43ae      	bics	r6, r5
 80089f0:	ee10 0a10 	vmov	r0, s0
 80089f4:	ee10 2a10 	vmov	r2, s0
 80089f8:	4629      	mov	r1, r5
 80089fa:	462b      	mov	r3, r5
 80089fc:	d10d      	bne.n	8008a1a <__ieee754_sqrt+0x36>
 80089fe:	f7f7 fdb3 	bl	8000568 <__aeabi_dmul>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 fbf7 	bl	80001fc <__adddf3>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	ec45 4b10 	vmov	d0, r4, r5
 8008a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	dc0b      	bgt.n	8008a36 <__ieee754_sqrt+0x52>
 8008a1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a22:	4326      	orrs	r6, r4
 8008a24:	d0f5      	beq.n	8008a12 <__ieee754_sqrt+0x2e>
 8008a26:	b135      	cbz	r5, 8008a36 <__ieee754_sqrt+0x52>
 8008a28:	f7f7 fbe6 	bl	80001f8 <__aeabi_dsub>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	f7f7 fec4 	bl	80007bc <__aeabi_ddiv>
 8008a34:	e7eb      	b.n	8008a0e <__ieee754_sqrt+0x2a>
 8008a36:	1509      	asrs	r1, r1, #20
 8008a38:	f000 808d 	beq.w	8008b56 <__ieee754_sqrt+0x172>
 8008a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a40:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a48:	07c9      	lsls	r1, r1, #31
 8008a4a:	bf5c      	itt	pl
 8008a4c:	005b      	lslpl	r3, r3, #1
 8008a4e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008a52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a56:	bf58      	it	pl
 8008a58:	0052      	lslpl	r2, r2, #1
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a60:	1076      	asrs	r6, r6, #1
 8008a62:	0052      	lsls	r2, r2, #1
 8008a64:	f04f 0e16 	mov.w	lr, #22
 8008a68:	46ac      	mov	ip, r5
 8008a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a6e:	eb0c 0001 	add.w	r0, ip, r1
 8008a72:	4298      	cmp	r0, r3
 8008a74:	bfde      	ittt	le
 8008a76:	1a1b      	suble	r3, r3, r0
 8008a78:	eb00 0c01 	addle.w	ip, r0, r1
 8008a7c:	186d      	addle	r5, r5, r1
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	f1be 0e01 	subs.w	lr, lr, #1
 8008a84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a88:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008a8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008a90:	d1ed      	bne.n	8008a6e <__ieee754_sqrt+0x8a>
 8008a92:	4674      	mov	r4, lr
 8008a94:	2720      	movs	r7, #32
 8008a96:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008a9a:	4563      	cmp	r3, ip
 8008a9c:	eb01 000e 	add.w	r0, r1, lr
 8008aa0:	dc02      	bgt.n	8008aa8 <__ieee754_sqrt+0xc4>
 8008aa2:	d113      	bne.n	8008acc <__ieee754_sqrt+0xe8>
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d811      	bhi.n	8008acc <__ieee754_sqrt+0xe8>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	eb00 0e01 	add.w	lr, r0, r1
 8008aae:	da57      	bge.n	8008b60 <__ieee754_sqrt+0x17c>
 8008ab0:	f1be 0f00 	cmp.w	lr, #0
 8008ab4:	db54      	blt.n	8008b60 <__ieee754_sqrt+0x17c>
 8008ab6:	f10c 0801 	add.w	r8, ip, #1
 8008aba:	eba3 030c 	sub.w	r3, r3, ip
 8008abe:	4290      	cmp	r0, r2
 8008ac0:	bf88      	it	hi
 8008ac2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008ac6:	1a12      	subs	r2, r2, r0
 8008ac8:	440c      	add	r4, r1
 8008aca:	46c4      	mov	ip, r8
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	3f01      	subs	r7, #1
 8008ad0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ad4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008ad8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008adc:	d1dd      	bne.n	8008a9a <__ieee754_sqrt+0xb6>
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	d01b      	beq.n	8008b1a <__ieee754_sqrt+0x136>
 8008ae2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008b90 <__ieee754_sqrt+0x1ac>
 8008ae6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008b94 <__ieee754_sqrt+0x1b0>
 8008aea:	e9da 0100 	ldrd	r0, r1, [sl]
 8008aee:	e9db 2300 	ldrd	r2, r3, [fp]
 8008af2:	f7f7 fb81 	bl	80001f8 <__aeabi_dsub>
 8008af6:	e9da 8900 	ldrd	r8, r9, [sl]
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 ffad 	bl	8000a60 <__aeabi_dcmple>
 8008b06:	b140      	cbz	r0, 8008b1a <__ieee754_sqrt+0x136>
 8008b08:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008b0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b10:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b14:	d126      	bne.n	8008b64 <__ieee754_sqrt+0x180>
 8008b16:	3501      	adds	r5, #1
 8008b18:	463c      	mov	r4, r7
 8008b1a:	106a      	asrs	r2, r5, #1
 8008b1c:	0863      	lsrs	r3, r4, #1
 8008b1e:	07e9      	lsls	r1, r5, #31
 8008b20:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008b24:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008b28:	bf48      	it	mi
 8008b2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008b2e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008b32:	461c      	mov	r4, r3
 8008b34:	e76d      	b.n	8008a12 <__ieee754_sqrt+0x2e>
 8008b36:	0ad3      	lsrs	r3, r2, #11
 8008b38:	3815      	subs	r0, #21
 8008b3a:	0552      	lsls	r2, r2, #21
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d0fa      	beq.n	8008b36 <__ieee754_sqrt+0x152>
 8008b40:	02dc      	lsls	r4, r3, #11
 8008b42:	d50a      	bpl.n	8008b5a <__ieee754_sqrt+0x176>
 8008b44:	f1c1 0420 	rsb	r4, r1, #32
 8008b48:	fa22 f404 	lsr.w	r4, r2, r4
 8008b4c:	1e4d      	subs	r5, r1, #1
 8008b4e:	408a      	lsls	r2, r1
 8008b50:	4323      	orrs	r3, r4
 8008b52:	1b41      	subs	r1, r0, r5
 8008b54:	e772      	b.n	8008a3c <__ieee754_sqrt+0x58>
 8008b56:	4608      	mov	r0, r1
 8008b58:	e7f0      	b.n	8008b3c <__ieee754_sqrt+0x158>
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	3101      	adds	r1, #1
 8008b5e:	e7ef      	b.n	8008b40 <__ieee754_sqrt+0x15c>
 8008b60:	46e0      	mov	r8, ip
 8008b62:	e7aa      	b.n	8008aba <__ieee754_sqrt+0xd6>
 8008b64:	f7f7 fb4a 	bl	80001fc <__adddf3>
 8008b68:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4640      	mov	r0, r8
 8008b72:	4649      	mov	r1, r9
 8008b74:	f7f7 ff6a 	bl	8000a4c <__aeabi_dcmplt>
 8008b78:	b120      	cbz	r0, 8008b84 <__ieee754_sqrt+0x1a0>
 8008b7a:	1ca0      	adds	r0, r4, #2
 8008b7c:	bf08      	it	eq
 8008b7e:	3501      	addeq	r5, #1
 8008b80:	3402      	adds	r4, #2
 8008b82:	e7ca      	b.n	8008b1a <__ieee754_sqrt+0x136>
 8008b84:	3401      	adds	r4, #1
 8008b86:	f024 0401 	bic.w	r4, r4, #1
 8008b8a:	e7c6      	b.n	8008b1a <__ieee754_sqrt+0x136>
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	200002a8 	.word	0x200002a8
 8008b94:	200002b0 	.word	0x200002b0

08008b98 <_init>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	bf00      	nop
 8008b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9e:	bc08      	pop	{r3}
 8008ba0:	469e      	mov	lr, r3
 8008ba2:	4770      	bx	lr

08008ba4 <_fini>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	bf00      	nop
 8008ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008baa:	bc08      	pop	{r3}
 8008bac:	469e      	mov	lr, r3
 8008bae:	4770      	bx	lr
